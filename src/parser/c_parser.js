/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[1,17],$Va=[1,18],$Vb=[1,19],$Vc=[1,20],$Vd=[1,21],$Ve=[1,24],$Vf=[1,27],$Vg=[1,28],$Vh=[1,26],$Vi=[1,83,84,85,89,90,91,92,93,94,95,96,97,98,99,102,107,108,113],$Vj=[1,83,84,85,89,90,91,92,93,94,95,96,97,98,99,102,107,108,113,152],$Vk=[1,38],$Vl=[1,39],$Vm=[1,37],$Vn=[1,32],$Vo=[4,7,9,17,25,32,79],$Vp=[4,7,9,17,25,32,63,79,83,84,85,89,90,91,92,93,94,95,96,97,98,99,102,107,108,113],$Vq=[4,104],$Vr=[25,79],$Vs=[2,96],$Vt=[1,51],$Vu=[1,52],$Vv=[1,4,7,10,11,12,14,15,22,23,29,31,32,33,34,35,36,79,83,84,85,89,90,91,92,93,94,95,96,97,98,99,102,104,106,107,108,113,136,137,140,142,143,144,145,146,147,148,149,152],$Vw=[9,25,63,65,79,104],$Vx=[1,57],$Vy=[1,56],$Vz=[4,7,9,17,25],$VA=[7,9,17,25,63,65,79,104],$VB=[1,64],$VC=[1,69],$VD=[1,91],$VE=[1,94],$VF=[1,96],$VG=[1,97],$VH=[1,98],$VI=[1,99],$VJ=[1,100],$VK=[1,78],$VL=[1,79],$VM=[1,81],$VN=[1,84],$VO=[1,85],$VP=[1,86],$VQ=[1,87],$VR=[1,88],$VS=[1,89],$VT=[1,72],$VU=[1,120],$VV=[1,123],$VW=[1,121],$VX=[1,122],$VY=[1,125],$VZ=[1,126],$V_=[1,127],$V$=[1,128],$V01=[1,129],$V11=[1,130],$V21=[1,131],$V31=[1,132],$V41=[1,133],$V51=[83,90,91,92,93,94,95,96,97,98,99,102,106,107,108,113],$V61=[1,152],$V71=[4,7,9,17,32,63,79],$V81=[25,106],$V91=[1,166],$Va1=[1,167],$Vb1=[25,79,106],$Vc1=[9,18,25,63,79,106],$Vd1=[9,18,25,31,32,33,34,38,39,42,43,45,46,47,48,50,51,54,56,58,60,62,63,79,106],$Ve1=[2,33],$Vf1=[9,18,25,31,32,33,34,38,39,42,43,45,46,47,48,50,51,54,56,58,60,62,63,65,66,67,68,69,70,71,72,73,74,75,79,106],$Vg1=[1,189],$Vh1=[9,18,25,60,62,63,79,106],$Vi1=[1,195],$Vj1=[7,9,17,18,20,21,22,23,25,31,32,33,34,38,39,42,43,45,46,47,48,50,51,54,56,58,60,62,63,65,66,67,68,69,70,71,72,73,74,75,79,106],$Vk1=[4,7,10,11,12,14,15,22,23,29,31,32,33,34,35,36],$Vl1=[9,18,25,58,60,62,63,79,106],$Vm1=[1,196],$Vn1=[2,1],$Vo1=[9,18,25,56,58,60,62,63,79,106],$Vp1=[1,200],$Vq1=[9,18,25,54,56,58,60,62,63,79,106],$Vr1=[1,201],$Vs1=[9,18,25,31,54,56,58,60,62,63,79,106],$Vt1=[1,202],$Vu1=[1,203],$Vv1=[9,18,25,31,50,51,54,56,58,60,62,63,79,106],$Vw1=[1,204],$Vx1=[1,205],$Vy1=[1,206],$Vz1=[1,207],$VA1=[9,18,25,31,45,46,47,48,50,51,54,56,58,60,62,63,79,106],$VB1=[1,208],$VC1=[1,209],$VD1=[9,18,25,31,42,43,45,46,47,48,50,51,54,56,58,60,62,63,79,106],$VE1=[1,210],$VF1=[1,211],$VG1=[9,18,25,31,33,34,42,43,45,46,47,48,50,51,54,56,58,60,62,63,79,106],$VH1=[1,212],$VI1=[1,213],$VJ1=[1,214],$VK1=[1,4,7,10,11,12,14,15,22,23,29,31,32,33,34,35,36,79,83,84,85,89,90,91,92,93,94,95,96,97,98,99,102,104,106,107,108,113,136,137,140,141,142,143,144,145,146,147,148,149,152],$VL1=[4,7,10,11,12,14,15,22,23,29,31,32,33,34,35,36,79,83,84,85,89,90,91,92,93,94,95,96,97,98,99,102,104,106,107,108,113,136,137,140,142,143,144,145,146,147,148,149],$VM1=[4,7,10,11,12,14,15,22,23,29,31,32,33,34,35,36,79,83,84,85,89,90,91,92,93,94,95,96,97,98,99,102,104,106,107,108,113,136,137,140,141,142,143,144,145,146,147,148,149],$VN1=[4,7,9,10,11,12,14,15,22,23,29,31,32,33,34,35,36,79,83,84,85,89,90,91,92,93,94,95,96,97,98,99,102,104,106,107,108,113,136,137,140,141,142,143,144,145,146,147,148,149],$VO1=[1,222],$VP1=[9,18,25,63,79],$VQ1=[9,25],$VR1=[1,242],$VS1=[1,243],$VT1=[17,20,65],$VU1=[1,277],$VV1=[2,161],$VW1=[1,310],$VX1=[1,309],$VY1=[1,312],$VZ1=[7,9,17,25];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"primary_expression":3,"IDENTIFIER":4,"constant":5,"string":6,"(":7,"expression":8,")":9,"I_CONSTANT":10,"F_CONSTANT":11,"ENUMERATION_CONSTANT":12,"enumeration_constant":13,"STRING_LITERAL":14,"FUNC_NAME":15,"postfix_expression":16,"[":17,"]":18,"argument_expression_list":19,".":20,"PTR_OP":21,"INC_OP":22,"DEC_OP":23,"assignment_expression":24,",":25,"unary_expression":26,"unary_operator":27,"cast_expression":28,"SIZEOF":29,"type_name":30,"&":31,"*":32,"+":33,"-":34,"~":35,"!":36,"multiplicative_expression":37,"/":38,"%":39,"additive_expression":40,"shift_expression":41,"LEFT_OP":42,"RIGHT_OP":43,"relational_expression":44,"<":45,">":46,"LE_OP":47,"GE_OP":48,"equality_expression":49,"EQ_OP":50,"NE_OP":51,"and_expression":52,"exclusive_or_expression":53,"^":54,"inclusive_or_expression":55,"|":56,"logical_and_expression":57,"AND_OP":58,"logical_or_expression":59,"OR_OP":60,"conditional_expression":61,"?":62,":":63,"assignment_operator":64,"=":65,"MUL_ASSIGN":66,"DIV_ASSIGN":67,"MOD_ASSIGN":68,"ADD_ASSIGN":69,"SUB_ASSIGN":70,"LEFT_ASSIGN":71,"RIGHT_ASSIGN":72,"AND_ASSIGN":73,"XOR_ASSIGN":74,"OR_ASSIGN":75,"constant_expression":76,"declaration":77,"declaration_specifiers":78,";":79,"init_declarator_list":80,"storage_class_specifier":81,"type_specifier":82,"type_qualifier":83,"function_specifier":84,"alignment_specifier":85,"init_declarator":86,"declarator":87,"initializer":88,"TYPEDEF":89,"VOID":90,"CHAR":91,"SHORT":92,"INT":93,"LONG":94,"FLOAT":95,"DOUBLE":96,"SIGNED":97,"UNSIGNED":98,"BOOL":99,"struct_or_union_specifier":100,"enum_specifier":101,"TYPEDEF_NAME":102,"struct_or_union":103,"{":104,"struct_declaration_list":105,"}":106,"STRUCT":107,"UNION":108,"struct_declaration":109,"specifier_qualifier_list":110,"struct_declarator_list":111,"struct_declarator":112,"ENUM":113,"enumerator_list":114,"enumerator":115,"pointer":116,"direct_declarator":117,"parameter_type_list":118,"identifier_list":119,"parameter_list":120,"ELLIPSIS":121,"parameter_declaration":122,"abstract_declarator":123,"direct_abstract_declarator":124,"initializer_list":125,"designation":126,"designator_list":127,"designator":128,"statement":129,"labeled_statement":130,"compound_statement":131,"expression_statement":132,"selection_statement":133,"iteration_statement":134,"jump_statement":135,"CASE":136,"DEFAULT":137,"block_item_list":138,"block_item":139,"IF":140,"ELSE":141,"SWITCH":142,"WHILE":143,"DO":144,"FOR":145,"GOTO":146,"CONTINUE":147,"BREAK":148,"RETURN":149,"translation_unit":150,"external_declaration":151,"EOF":152,"function_definition":153,"declaration_list":154,"$accept":0,"$end":1},
terminals_: {2:"error",4:"IDENTIFIER",7:"(",9:")",10:"I_CONSTANT",11:"F_CONSTANT",12:"ENUMERATION_CONSTANT",14:"STRING_LITERAL",15:"FUNC_NAME",17:"[",18:"]",20:".",21:"PTR_OP",22:"INC_OP",23:"DEC_OP",25:",",29:"SIZEOF",31:"&",32:"*",33:"+",34:"-",35:"~",36:"!",38:"/",39:"%",42:"LEFT_OP",43:"RIGHT_OP",45:"<",46:">",47:"LE_OP",48:"GE_OP",50:"EQ_OP",51:"NE_OP",54:"^",56:"|",58:"AND_OP",60:"OR_OP",62:"?",63:":",65:"=",66:"MUL_ASSIGN",67:"DIV_ASSIGN",68:"MOD_ASSIGN",69:"ADD_ASSIGN",70:"SUB_ASSIGN",71:"LEFT_ASSIGN",72:"RIGHT_ASSIGN",73:"AND_ASSIGN",74:"XOR_ASSIGN",75:"OR_ASSIGN",79:";",83:"type_qualifier",84:"function_specifier",85:"alignment_specifier",89:"TYPEDEF",90:"VOID",91:"CHAR",92:"SHORT",93:"INT",94:"LONG",95:"FLOAT",96:"DOUBLE",97:"SIGNED",98:"UNSIGNED",99:"BOOL",102:"TYPEDEF_NAME",104:"{",106:"}",107:"STRUCT",108:"UNION",113:"ENUM",121:"ELLIPSIS",136:"CASE",137:"DEFAULT",140:"IF",141:"ELSE",142:"SWITCH",143:"WHILE",144:"DO",145:"FOR",146:"GOTO",147:"CONTINUE",148:"BREAK",149:"RETURN",152:"EOF"},
productions_: [0,[3,1],[3,1],[3,1],[3,3],[5,1],[5,1],[5,1],[13,1],[6,1],[6,1],[16,1],[16,4],[16,3],[16,4],[16,3],[16,3],[16,2],[16,2],[19,1],[19,3],[26,1],[26,2],[26,2],[26,2],[26,2],[26,4],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[28,1],[28,4],[37,1],[37,3],[37,3],[37,3],[40,1],[40,3],[40,3],[41,1],[41,3],[41,3],[44,1],[44,3],[44,3],[44,3],[44,3],[49,1],[49,3],[49,3],[52,1],[52,3],[53,1],[53,3],[55,1],[55,3],[57,1],[57,3],[59,1],[59,3],[61,1],[61,5],[24,1],[24,3],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[8,1],[8,3],[76,1],[77,2],[77,3],[78,2],[78,1],[78,2],[78,1],[78,2],[78,1],[78,2],[78,1],[78,2],[78,1],[80,1],[80,3],[86,3],[86,1],[81,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[100,4],[100,5],[100,2],[103,1],[103,1],[105,1],[105,2],[109,2],[109,3],[110,2],[110,1],[110,2],[110,1],[111,1],[111,3],[112,2],[112,3],[112,1],[101,4],[101,5],[101,5],[101,6],[101,2],[114,1],[114,3],[115,3],[115,1],[87,2],[87,1],[117,1],[117,3],[117,3],[117,4],[117,4],[117,3],[117,4],[116,2],[116,1],[118,3],[118,1],[120,1],[120,3],[122,2],[122,2],[122,1],[119,1],[119,3],[30,2],[30,1],[123,2],[123,1],[123,1],[124,3],[124,2],[124,4],[124,2],[124,3],[124,3],[124,4],[88,3],[88,4],[88,1],[125,2],[125,1],[125,4],[125,3],[126,2],[127,1],[127,2],[128,3],[128,2],[129,1],[129,1],[129,1],[129,1],[129,1],[129,1],[130,3],[130,4],[130,3],[131,2],[131,3],[138,1],[138,2],[139,1],[139,1],[132,1],[132,2],[133,7],[133,5],[133,5],[134,5],[134,7],[134,6],[134,7],[134,6],[134,7],[135,3],[135,2],[135,2],[135,2],[135,3],[150,3],[150,2],[150,2],[150,1],[151,1],[151,1],[153,3],[154,1],[154,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 7: case 8:
 this.$ = new Identifier($$[$0], this._$); 
break;
case 2: case 3: case 11: case 21: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 35: case 39: case 42: case 45: case 50: case 53: case 55: case 57: case 59: case 61: case 63: case 65: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 80: case 108: case 109: case 114: case 115: case 139: case 150: case 162: case 182: case 183: case 184: case 185: case 186: case 187: case 193: case 217: case 218:
 this.$ = $$[$0]; 
break;
case 4: case 141: case 163: case 177:
 this.$ = $$[$0-1]; 
break;
case 5:
 this.$ = new CExpr("i_constant", $$[$0], this._$); 
break;
case 6:
 this.$ = new CExpr("f_constant", $$[$0], this._$); 
break;
case 9:
 this.$ =  new CExpr("s_literal", $$[$0], this._$); 
break;
case 10:
 this.$ = $$[$0] 
break;
case 12:
 this.$ = new SubscriptExpr($$[$0-3], $$[$0-1], this._$); 
break;
case 13:
 
		this.$ = new FncCallExpr($$[$0-2], [], this._$);
	
break;
case 14:

		this.$ = new FncCallExpr($$[$0-3], $$[$0-1], this._$);
	
break;
case 15:
 this.$ = new MemberAccessExpr($$[$0-2], $$[$0], this._$); 
break;
case 16:
 this.$ = new PtrMemberAccessExpr($$[$0-2], $$[$0], this._$); 
break;
case 17: case 18:
 this.$ = new UExpr($$[$0-1], $$[$0], this._$); 
break;
case 19: case 78: case 84: case 86: case 88: case 90: case 92: case 93: case 121: case 123: case 134: case 151: case 178:
 this.$ = [$$[$0]]; 
break;
case 20: case 79: case 94: case 135: case 152:
 this.$ = [...$$[$0-2], $$[$0]]; 
break;
case 22: case 23: case 24: case 25:

		this.$ = new UExpr($$[$0], $$[$0-1], this._$);
	
break;
case 26:

		this.$ = new UExpr($$[$0-1], $$[$0-3], this._$);
	
break;
case 34:
 this.$ = new CastExpr($$[$0-2], $$[$0], this._$); 
break;
case 36: case 37: case 38: case 40: case 41: case 43: case 44: case 54: case 56: case 58: case 60: case 62:
 this.$ = new BArithExpr($$[$0-2], $$[$0-1], $$[$0], this._$); 
break;
case 46: case 47: case 48: case 49: case 51: case 52:
 this.$ = new BCompExpr($$[$0-2], $$[$0-1], $$[$0], this._$); 
break;
case 64:
 this.$ = new CondExpr($$[$0-4], $$[$0-2], $$[$0], this._$); 
break;
case 66:
 this.$ = new BAssignExpr($$[$0-2], $$[$0-1], $$[$0], this._$); 
break;
case 81:

		this.$ = [new Type($$[$0-1], this._$)];
	
break;
case 82:

		this.$ = getDeclarations($$[$0-2], $$[$0-1], this._$);
	
break;
case 83: case 85: case 87: case 89: case 91: case 120: case 122:
 this.$ = [$$[$0-1], ...$$[$0]]; 
break;
case 95: case 127:
 this.$ = { declarator: $$[$0-2], initializer: $$[$0] }; 
break;
case 96: case 128:
 this.$ = { declarator: $$[$0], initializer: null }; 
break;
case 111:
 // anonymous struct or union
		this.$ = ($$[$0-3] == "STRUCT") ? new Struct($$[$0-1], new Unnamed(this._$), this._$) : new Union($$[$0-1], new Unnamed(this._$), this._$); 
	
break;
case 112:
 // struct variable initialization and struct definition 
		this.$ = ($$[$0-4] == "STRUCT") ? new Struct($$[$0-1], new Tagname($$[$0-3], this._$), this._$) : new Union($$[$0-1], new Tagname($$[$0-3], this._$), this._$); 
	
break;
case 113:
 // struct variable declaration
		this.$ = ($$[$0-1] == "STRUCT") ? new Struct(null, new Tagname($$[$0], this._$), this._$) : new Union(null, new Tagname($$[$0], this._$), this._$); 
	
break;
case 116: case 195: case 196: case 216:
 this.$ = Array.isArray($$[$0]) ? $$[$0] : [$$[$0]]; 
break;
case 117: case 215:
 this.$ = Array.isArray($$[$0]) ? [...$$[$0-1], ...$$[$0]] : [...$$[$0-1], $$[$0]]; 
break;
case 118:
 
		this.$ = new Type($$[$0-1], this._$); 
	
break;
case 119:
 
		this.$ = [];
		for(var declInit of $$[$0-1]){
			this.$.push(new Declaration(new Type($$[$0-2], this._$), declInit.declarator, declInit.initializer, this._$));
		}
	
break;
case 124:

		this.$ = [$$[$0]];
	
break;
case 125:
 
		this.$ = [...$$[$0-2], $$[$0]];
	
break;
case 126:
 this.$ = { declarator: new Unnamed(this._$), initializer: $$[$0] }; 
break;
case 129:
 this.$ = new Enum(new Unnamed(this._$), $$[$0-1], this._$); 
break;
case 130:
 this.$ = new Enum(new Unnamed(this._$), $$[$0-2], this._$); 
break;
case 131:
 this.$ = new Enum($$[$0-3], $$[$0-1], this._$); 
break;
case 132:
 this.$ = new Enum($$[$0-4], $$[$0-2], this._$); 
break;
case 133:
 this.$ = new Tagname($$[$0], this._$); 
break;
case 136:
 this.$ = new Enumerator($$[$0-2], $$[$0], this._$); 
break;
case 137:
 this.$ = new Enumerator($$[$0], null, this._$); 
break;
case 138:
 this.$ = new Declarator(DECLTYPE.PTR, $$[$0], $$[$0-1], this._$); 
break;
case 140:
 this.$ = new Declarator(DECLTYPE.ID, null, new Identifier($$[$0], this._$), this._$); 
break;
case 142:
 this.$ = new Declarator(DECLTYPE.ARR, $$[$0-2], null, this._$); 
break;
case 143:
 this.$ = new Declarator(DECLTYPE.ARR, $$[$0-3], $$[$0-1], this._$); 
break;
case 144: case 146:
 this.$ = new Declarator(DECLTYPE.FNC, $$[$0-3], { parameters: $$[$0-1] }, this._$); 
break;
case 145:
 this.$ = new Declarator(DECLTYPE.FNC, $$[$0-2], { parameters: [] }, this._$); 
break;
case 147:
 this.$ = new Pointer($$[$0], null, this._$); 
break;
case 148:
 this.$ = new Pointer(null, null, this._$); 
break;
case 149:
 this.$ = $$[$0-2]; 
break;
case 153: case 154:
 this.$ = new Declaration(new Type($$[$0-1], this._$), $$[$0], null, this._$); 
break;
case 155:
 this.$ = new Declaration(new Type($$[$0]), new Unnamed(this._$), null, this._$); 
break;
case 156:
 this.$ = [new Declaration(new Type(), new Declarator(DECLTYPE.ID, new Identifier($$[$0])), null, this._$)]; 
break;
case 157:
 this.$ = [...$$[$0-2], new Declaration(new Type(), new Declarator(DECLTYPE.ID, new Identifier($$[$0])), null, this._$)]; 
break;
case 160:
 this.$ = new AbstractDeclarator(DECLTYPE.PTR, $$[$0], $$[$0-1], this._$); 
break;
case 161:
 this.$ = new AbstractDeclarator(DECLTYPE.PTR, null, $$[$0], this._$); 
break;
case 164:
 this.$ = new AbstractDeclarator(DECLTYPE.ARR, null, null, this._$); 
break;
case 165:
 this.$ = new AbstractDeclarator(DECLTYPE.ARR, $$[$0-3], $$[$0-1]); 
break;
case 166:
 this.$ = new AbstractDeclarator(DECLTYPE.FNC, null, null, this._$); 
break;
case 167:
 this.$ = new AbstractDeclarator(DECLTYPE.FNC, null, $$[$0-1], this._$); 
break;
case 168:
 this.$ = new AbstractDeclarator(DECLTYPE.FNC, $$[$0-2], { parameters: [] }, this._$); 
break;
case 169:
 this.$ = new AbstractDeclarator(DECLTYPE.FNC, $$[$0-3], { parameters: $$[$0-1] }, this._$); 
break;
case 170:
 this.$ = new Initializer(INITTYPE.ARR, $$[$0-1], null, null, this._$); 
break;
case 171:
 this.$ = new Initializer(INITTYPE.ARR, $$[$0-2], null, null, this._$); 
break;
case 172:
 this.$ = new Initializer(INITTYPE.EXPR, $$[$0], null, null, this._$); 
break;
case 173:
 this.$ = [new Initializer(INITTYPE.NESTED, $$[$0], null, $$[$0-1], this._$)]; 
break;
case 174:
 this.$ = [new Initializer(INITTYPE.NESTED, $$[$0], null, null, this._$)]; 
break;
case 175:
 this.$ = [...$$[$0-3], new Initializer(INITTYPE.NESTED, $$[$0], null, $$[$0-1], this._$)]; 
break;
case 176:
 this.$ = [...$$[$0-2], new Initializer(INITTYPE.NESTED, $$[$0], null, null, this._$)]; 
break;
case 179:
 this.$ = [...$$[$0-1], $$[$0]]; 
break;
case 180:
 this.$ = new Designator($$[$0-1], this._$); 
break;
case 181:
 this.$ = new Designator(new Identifier($$[$0], this._$)); 
break;
case 188:
 this.$ = new LStmt($$[$0-2], $$[$0]); 
break;
case 189:
 this.$ = new CaseStmt($$[$0-2], $$[$0]); 
break;
case 190:
 this.$ = new CaseStmt(null, $$[$0]); 
break;
case 191:
 this.$ = new CStmt([], this._$); 
break;
case 192:
 this.$ = new CStmt($$[$0-1], this._$); 
break;
case 194:
 this.$ = [...$$[$0-1], ...$$[$0]]; 
break;
case 197:
 this.$ = new NOP(this._$); 
break;
case 198:
 this.$ = Array.isArray($$[$0-1]) ? $$[$0-1] : [$$[$0-1]]; 
break;
case 199:
 this.$ = new IfStmt($$[$0-4], $$[$0-2], $$[$0], this._$); 
break;
case 200:
 this.$ = new IfStmt($$[$0-2], $$[$0], null, this._$); 
break;
case 201:
 this.$ = new SwitchStmt($$[$0-2], $$[$0], this._$); 
break;
case 202:
 this.$ = new WhileLoop($$[$0-2], $$[$0], this._$); 
break;
case 203:
 this.$ = new DoWhileLoop($$[$0-2], $$[$0-5], this._$); 
break;
case 204: case 206:
 this.$ = new ForLoop($$[$0-3], $$[$0-2], null, $$[$0], this._$); 
break;
case 205: case 207:
 this.$ = new ForLoop($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], this._$); 
break;
case 208:
 this.$ = new Goto(new LabelName($$[$0-1]), this._$); 
break;
case 209:
 this.$ = new Continue(this._$); 
break;
case 210:
 this.$ = new Break(this._$); 
break;
case 211:
 this.$ = new Return(null, this._$); 
break;
case 212:
 this.$ = new Return($$[$0-1], this._$); 
break;
case 213:
 parser.yy.lastSymbols = parser.yy.symbols; return Array.isArray($$[$0-1]) ? [...$$[$0-2], ...$$[$0-1]] : [...$$[$0-2], $$[$0-1]]; 
break;
case 214:
 parser.yy.lastSymbols = parser.yy.symbols; return Array.isArray($$[$0-1]) ? $$[$0-1] : [$$[$0-1]]; 
break;
case 219:
 this.$ = new Fnc($$[$0-1], $$[$0-2], $$[$0], this._$); 
break;
}
},
table: [{77:4,78:5,81:6,82:7,83:$V0,84:$V1,85:$V2,89:$V3,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,100:22,101:23,102:$Ve,103:25,107:$Vf,108:$Vg,113:$Vh,150:1,151:2,153:3},{1:[3],77:4,78:5,81:6,82:7,83:$V0,84:$V1,85:$V2,89:$V3,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,100:22,101:23,102:$Ve,103:25,107:$Vf,108:$Vg,113:$Vh,151:29,153:3},o($Vi,[2,216],{152:[1,30]}),o($Vj,[2,217]),o($Vj,[2,218]),{4:$Vk,7:$Vl,32:$Vm,79:$Vn,80:33,86:36,87:31,116:34,117:35},o($Vo,[2,84],{81:6,82:7,100:22,101:23,103:25,78:40,83:$V0,84:$V1,85:$V2,89:$V3,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,102:$Ve,107:$Vf,108:$Vg,113:$Vh}),o($Vo,[2,86],{81:6,82:7,100:22,101:23,103:25,78:41,83:$V0,84:$V1,85:$V2,89:$V3,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,102:$Ve,107:$Vf,108:$Vg,113:$Vh}),o($Vo,[2,88],{81:6,82:7,100:22,101:23,103:25,78:42,83:$V0,84:$V1,85:$V2,89:$V3,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,102:$Ve,107:$Vf,108:$Vg,113:$Vh}),o($Vo,[2,90],{81:6,82:7,100:22,101:23,103:25,78:43,83:$V0,84:$V1,85:$V2,89:$V3,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,102:$Ve,107:$Vf,108:$Vg,113:$Vh}),o($Vo,[2,92],{81:6,82:7,100:22,101:23,103:25,78:44,83:$V0,84:$V1,85:$V2,89:$V3,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,102:$Ve,107:$Vf,108:$Vg,113:$Vh}),o([4,7,9,17,25,32,79,83,84,85,89,90,91,92,93,94,95,96,97,98,99,102,107,108,113],[2,97]),o($Vp,[2,98]),o($Vp,[2,99]),o($Vp,[2,100]),o($Vp,[2,101]),o($Vp,[2,102]),o($Vp,[2,103]),o($Vp,[2,104]),o($Vp,[2,105]),o($Vp,[2,106]),o($Vp,[2,107]),o($Vp,[2,108]),o($Vp,[2,109]),o($Vp,[2,110]),{4:[1,46],104:[1,45]},{4:[1,48],104:[1,47]},o($Vq,[2,114]),o($Vq,[2,115]),o($Vi,[2,215],{152:[1,49]}),o($Vi,[2,214]),o($Vr,$Vs,{131:50,65:$Vt,104:$Vu}),o($Vv,[2,81]),{25:[1,54],79:[1,53]},{4:$Vk,7:$Vl,117:55},o($Vw,[2,139],{7:$Vx,17:$Vy}),o($Vr,[2,93]),o($Vz,[2,148],{116:58,32:$Vm}),o($VA,[2,140]),{4:$Vk,7:$Vl,32:$Vm,87:59,116:34,117:35},o($Vo,[2,83]),o($Vo,[2,85]),o($Vo,[2,87]),o($Vo,[2,89]),o($Vo,[2,91]),{82:63,83:$VB,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,100:22,101:23,102:$Ve,103:25,105:60,107:$Vf,108:$Vg,109:61,110:62,113:$Vh},o($Vp,[2,113],{104:[1,65]}),{4:$VC,13:68,114:66,115:67},o($Vp,[2,133],{104:[1,70]}),o($Vi,[2,213]),o($Vj,[2,219]),{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:73,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,88:71,104:$VT},{3:83,4:$VU,5:92,6:93,7:$VE,8:124,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,77:111,78:113,79:$VV,81:6,82:7,83:$V0,84:$V1,85:$V2,89:$V3,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,100:22,101:23,102:$Ve,103:25,104:$Vu,106:[1,108],107:$Vf,108:$Vg,113:$Vh,129:112,130:114,131:115,132:116,133:117,134:118,135:119,136:$VW,137:$VX,138:109,139:110,140:$VY,142:$VZ,143:$V_,144:$V$,145:$V01,146:$V11,147:$V21,148:$V31,149:$V41},o($Vv,[2,82]),{4:$Vk,7:$Vl,32:$Vm,86:135,87:136,116:34,117:35},o($Vw,[2,138],{7:$Vx,17:$Vy}),{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,18:[1,137],22:$VK,23:$VL,24:138,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74},{4:[1,143],9:[1,140],78:145,81:6,82:7,83:$V0,84:$V1,85:$V2,89:$V3,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,100:22,101:23,102:$Ve,103:25,107:$Vf,108:$Vg,113:$Vh,118:139,119:141,120:142,122:144},o($Vz,[2,147]),{9:[1,146]},{82:63,83:$VB,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,100:22,101:23,102:$Ve,103:25,106:[1,147],107:$Vf,108:$Vg,109:148,110:62,113:$Vh},o($V51,[2,116]),{4:$Vk,7:$Vl,32:$Vm,63:$V61,79:[1,149],87:153,111:150,112:151,116:34,117:35},o($V71,[2,121],{100:22,101:23,103:25,82:63,110:154,83:$VB,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,102:$Ve,107:$Vf,108:$Vg,113:$Vh}),o($V71,[2,123],{100:22,101:23,103:25,82:63,110:155,83:$VB,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,102:$Ve,107:$Vf,108:$Vg,113:$Vh}),{82:63,83:$VB,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,100:22,101:23,102:$Ve,103:25,105:156,107:$Vf,108:$Vg,109:61,110:62,113:$Vh},{25:[1,158],106:[1,157]},o($V81,[2,134]),o($V81,[2,137],{65:[1,159]}),o([25,65,106],[2,8]),{4:$VC,13:68,114:160,115:67},o($Vr,[2,95]),{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,17:$V91,20:$Va1,22:$VK,23:$VL,24:73,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,88:163,104:$VT,125:161,126:162,127:164,128:165},o($Vb1,[2,172]),o($Vc1,[2,65]),o($Vd1,$Ve1,{64:168,65:[1,169],66:[1,170],67:[1,171],68:[1,172],69:[1,173],70:[1,174],71:[1,175],72:[1,176],73:[1,177],74:[1,178],75:[1,179]}),o($Vc1,[2,63],{60:[1,181],62:[1,180]}),o($Vf1,[2,21],{7:[1,183],17:[1,182],20:[1,184],21:[1,185],22:[1,186],23:[1,187]}),{3:83,4:$VD,5:92,6:93,7:$Vg1,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:188,27:80,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS},{3:83,4:$VD,5:92,6:93,7:$Vg1,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:190,27:80,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:191,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS},{3:83,4:$VD,5:92,6:93,7:[1,194],10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:193,27:80,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS},o($Vh1,[2,61],{58:$Vi1}),o($Vj1,[2,11]),o($Vk1,[2,27]),o($Vk1,[2,28]),o($Vk1,[2,29]),o($Vk1,[2,30]),o($Vk1,[2,31]),o($Vk1,[2,32]),o($Vl1,[2,59],{56:$Vm1}),o($Vj1,$Vn1),o($Vj1,[2,2]),o($Vj1,[2,3]),{3:83,4:$VD,5:92,6:93,7:$VE,8:197,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,30:198,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,82:63,83:$VB,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,100:22,101:23,102:$Ve,103:25,107:$Vf,108:$Vg,110:199,113:$Vh},o($Vo1,[2,57],{54:$Vp1}),o($Vj1,[2,5]),o($Vj1,[2,6]),o($Vj1,[2,7]),o($Vj1,[2,9]),o($Vj1,[2,10]),o($Vq1,[2,55],{31:$Vr1}),o($Vs1,[2,53],{50:$Vt1,51:$Vu1}),o($Vv1,[2,50],{45:$Vw1,46:$Vx1,47:$Vy1,48:$Vz1}),o($VA1,[2,45],{42:$VB1,43:$VC1}),o($VD1,[2,42],{33:$VE1,34:$VF1}),o($VG1,[2,39],{32:$VH1,38:$VI1,39:$VJ1}),o($Vd1,[2,35]),o($VK1,[2,191]),{3:83,4:$VU,5:92,6:93,7:$VE,8:124,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,77:111,78:113,79:$VV,81:6,82:7,83:$V0,84:$V1,85:$V2,89:$V3,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,100:22,101:23,102:$Ve,103:25,104:$Vu,106:[1,215],107:$Vf,108:$Vg,113:$Vh,129:112,130:114,131:115,132:116,133:117,134:118,135:119,136:$VW,137:$VX,139:216,140:$VY,142:$VZ,143:$V_,144:$V$,145:$V01,146:$V11,147:$V21,148:$V31,149:$V41},o($VL1,[2,193]),o($VL1,[2,195]),o($VL1,[2,196]),{4:$Vk,7:$Vl,32:$Vm,79:$Vn,80:33,86:36,87:136,116:34,117:35},o($VM1,[2,182]),o($VM1,[2,183]),o($VM1,[2,184]),o($VM1,[2,185]),o($VM1,[2,186]),o($VM1,[2,187]),o([7,17,20,21,22,23,25,31,32,33,34,38,39,42,43,45,46,47,48,50,51,54,56,58,60,62,65,66,67,68,69,70,71,72,73,74,75,79],$Vn1,{63:[1,217]}),{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:219,76:218},{63:[1,220]},o($VN1,[2,197]),{25:$VO1,79:[1,221]},{7:[1,223]},{7:[1,224]},{7:[1,225]},{3:83,4:$VU,5:92,6:93,7:$VE,8:124,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,79:$VV,104:$Vu,129:226,130:114,131:115,132:116,133:117,134:118,135:119,136:$VW,137:$VX,140:$VY,142:$VZ,143:$V_,144:$V$,145:$V01,146:$V11,147:$V21,148:$V31,149:$V41},{7:[1,227]},{4:[1,228]},{79:[1,229]},{79:[1,230]},{3:83,4:$VD,5:92,6:93,7:$VE,8:232,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,79:[1,231]},o($VP1,[2,78]),o($Vr,[2,94]),o($Vr,$Vs,{65:$Vt}),o($VA,[2,142]),{18:[1,233]},{9:[1,234]},o($VA,[2,145]),{9:[1,235],25:[1,236]},{9:[2,150],25:[1,237]},o($VQ1,[2,156]),o($VQ1,[2,151]),o($VQ1,[2,155],{117:35,87:238,123:239,116:240,124:241,4:$Vk,7:$VR1,17:$VS1,32:$Vm}),o($VA,[2,141]),o($Vp,[2,111]),o($V51,[2,117]),o($V51,[2,118]),{25:[1,245],79:[1,244]},o($Vr,[2,124]),{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:219,76:246},o($Vr,[2,128],{63:[1,247]}),o($V71,[2,120]),o($V71,[2,122]),{82:63,83:$VB,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,100:22,101:23,102:$Ve,103:25,106:[1,248],107:$Vf,108:$Vg,109:148,110:62,113:$Vh},o($Vp,[2,129]),{4:$VC,13:68,106:[1,249],115:250},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:219,76:251},{25:[1,253],106:[1,252]},{25:[1,255],106:[1,254]},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:73,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,88:256,104:$VT},o($V81,[2,174]),{17:$V91,20:$Va1,65:[1,257],128:258},o($VT1,[2,178]),{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:219,76:259},{4:[1,260]},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:261,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74},o($Vk1,[2,67]),o($Vk1,[2,68]),o($Vk1,[2,69]),o($Vk1,[2,70]),o($Vk1,[2,71]),o($Vk1,[2,72]),o($Vk1,[2,73]),o($Vk1,[2,74]),o($Vk1,[2,75]),o($Vk1,[2,76]),o($Vk1,[2,77]),{3:83,4:$VD,5:92,6:93,7:$VE,8:262,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:263},{3:83,4:$VD,5:92,6:93,7:$VE,8:264,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74},{3:83,4:$VD,5:92,6:93,7:$VE,9:[1,265],10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,19:266,22:$VK,23:$VL,24:267,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74},{4:[1,268]},{4:[1,269]},o($Vj1,[2,17]),o($Vj1,[2,18]),o($Vf1,[2,22]),{3:83,4:$VD,5:92,6:93,7:$VE,8:197,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74},o($Vf1,[2,23]),o($Vf1,[2,24]),o($Vf1,$Ve1),o($Vf1,[2,25]),{3:83,4:$VD,5:92,6:93,7:$VE,8:197,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,30:270,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,82:63,83:$VB,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,100:22,101:23,102:$Ve,103:25,107:$Vf,108:$Vg,110:199,113:$Vh},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:271},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:272},{9:[1,273],25:$VO1},{9:[1,274]},{7:$VU1,9:[2,159],17:$VS1,32:$Vm,116:276,123:275,124:241},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:278},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:279},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:280},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:281},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:282},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:283},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:284},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:285},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:286},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:287},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:288},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:289},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:290,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:291,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS},{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:292,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS},o($VK1,[2,192]),o($VL1,[2,194]),{3:83,4:$VU,5:92,6:93,7:$VE,8:124,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,79:$VV,104:$Vu,129:293,130:114,131:115,132:116,133:117,134:118,135:119,136:$VW,137:$VX,140:$VY,142:$VZ,143:$V_,144:$V$,145:$V01,146:$V11,147:$V21,148:$V31,149:$V41},{63:[1,294]},o([18,25,63,79,106],[2,80]),{3:83,4:$VU,5:92,6:93,7:$VE,8:124,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,79:$VV,104:$Vu,129:295,130:114,131:115,132:116,133:117,134:118,135:119,136:$VW,137:$VX,140:$VY,142:$VZ,143:$V_,144:$V$,145:$V01,146:$V11,147:$V21,148:$V31,149:$V41},o($VN1,[2,198]),{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:296,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74},{3:83,4:$VD,5:92,6:93,7:$VE,8:297,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74},{3:83,4:$VD,5:92,6:93,7:$VE,8:298,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74},{3:83,4:$VD,5:92,6:93,7:$VE,8:299,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74},{143:[1,300]},{3:83,4:$VD,5:92,6:93,7:$VE,8:124,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,77:302,78:113,79:$VV,81:6,82:7,83:$V0,84:$V1,85:$V2,89:$V3,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,100:22,101:23,102:$Ve,103:25,107:$Vf,108:$Vg,113:$Vh,132:301},{79:[1,303]},o($VM1,[2,209]),o($VM1,[2,210]),o($VM1,[2,211]),{25:$VO1,79:[1,304]},o($VA,[2,143]),o($VA,[2,144]),o($VA,[2,146]),{4:[1,305]},{78:145,81:6,82:7,83:$V0,84:$V1,85:$V2,89:$V3,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,100:22,101:23,102:$Ve,103:25,107:$Vf,108:$Vg,113:$Vh,121:[1,306],122:307},o($VQ1,[2,153]),o($VQ1,[2,154]),o($VQ1,$VV1,{117:55,124:308,4:$Vk,7:$VR1,17:$VS1}),o($VQ1,[2,162],{7:$VW1,17:$VX1}),{4:$Vk,7:$VR1,9:$VY1,17:$VS1,32:$Vm,78:145,81:6,82:7,83:$V0,84:$V1,85:$V2,87:59,89:$V3,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,100:22,101:23,102:$Ve,103:25,107:$Vf,108:$Vg,113:$Vh,116:240,117:35,118:313,120:142,122:144,123:311,124:241},{18:[1,314]},o($V51,[2,119]),{4:$Vk,7:$Vl,32:$Vm,63:$V61,87:153,112:315,116:34,117:35},o($Vr,[2,126]),{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:219,76:316},o($Vp,[2,112]),o($Vp,[2,130]),o($V81,[2,135]),o($V81,[2,136]),o($Vp,[2,131]),{4:$VC,13:68,106:[1,317],115:250},o($Vb1,[2,170]),{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,17:$V91,20:$Va1,22:$VK,23:$VL,24:73,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,88:320,104:$VT,106:[1,318],126:319,127:164,128:165},o($V81,[2,173]),o([4,7,10,11,12,14,15,22,23,29,31,32,33,34,35,36,104],[2,177]),o($VT1,[2,179]),{18:[1,321]},o($VT1,[2,181]),o($Vc1,[2,66]),{25:$VO1,63:[1,322]},o($Vh1,[2,62],{58:$Vi1}),{18:[1,323],25:$VO1},o($Vj1,[2,13]),{9:[1,324],25:[1,325]},o($VQ1,[2,19]),o($Vj1,[2,15]),o($Vj1,[2,16]),{9:[1,326]},o($Vl1,[2,60],{56:$Vm1}),o($Vo1,[2,58],{54:$Vp1}),o($Vj1,[2,4]),{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:327,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS},{9:[2,158]},{7:$VU1,9:$VV1,17:$VS1,124:308},{7:$VU1,9:$VY1,17:$VS1,32:$Vm,78:145,81:6,82:7,83:$V0,84:$V1,85:$V2,89:$V3,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,100:22,101:23,102:$Ve,103:25,107:$Vf,108:$Vg,113:$Vh,116:276,118:313,120:142,122:144,123:311,124:241},o($Vq1,[2,56],{31:$Vr1}),o($Vs1,[2,54],{50:$Vt1,51:$Vu1}),o($Vv1,[2,51],{45:$Vw1,46:$Vx1,47:$Vy1,48:$Vz1}),o($Vv1,[2,52],{45:$Vw1,46:$Vx1,47:$Vy1,48:$Vz1}),o($VA1,[2,46],{42:$VB1,43:$VC1}),o($VA1,[2,47],{42:$VB1,43:$VC1}),o($VA1,[2,48],{42:$VB1,43:$VC1}),o($VA1,[2,49],{42:$VB1,43:$VC1}),o($VD1,[2,43],{33:$VE1,34:$VF1}),o($VD1,[2,44],{33:$VE1,34:$VF1}),o($VG1,[2,40],{32:$VH1,38:$VI1,39:$VJ1}),o($VG1,[2,41],{32:$VH1,38:$VI1,39:$VJ1}),o($Vd1,[2,36]),o($Vd1,[2,37]),o($Vd1,[2,38]),o($VM1,[2,188]),{3:83,4:$VU,5:92,6:93,7:$VE,8:124,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,79:$VV,104:$Vu,129:328,130:114,131:115,132:116,133:117,134:118,135:119,136:$VW,137:$VX,140:$VY,142:$VZ,143:$V_,144:$V$,145:$V01,146:$V11,147:$V21,148:$V31,149:$V41},o($VM1,[2,190]),o($VP1,[2,79]),{9:[1,329],25:$VO1},{9:[1,330],25:$VO1},{9:[1,331],25:$VO1},{7:[1,332]},{3:83,4:$VD,5:92,6:93,7:$VE,8:124,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,79:$VV,132:333},{3:83,4:$VD,5:92,6:93,7:$VE,8:124,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,79:$VV,132:334},o($VM1,[2,208]),o($VM1,[2,212]),o($VQ1,[2,157]),{9:[2,149]},o($VQ1,[2,152]),o($VQ1,[2,160],{7:$VW1,17:$VX1}),{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:335,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74},{9:[1,336],78:145,81:6,82:7,83:$V0,84:$V1,85:$V2,89:$V3,90:$V4,91:$V5,92:$V6,93:$V7,94:$V8,95:$V9,96:$Va,97:$Vb,98:$Vc,99:$Vd,100:22,101:23,102:$Ve,103:25,107:$Vf,108:$Vg,113:$Vh,118:337,120:142,122:144},{9:[1,338]},o($VZ1,[2,166]),{9:[1,339]},o($VZ1,[2,164]),o($Vr,[2,125]),o($Vr,[2,127]),o($Vp,[2,132]),o($Vb1,[2,171]),{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:73,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,88:340,104:$VT},o($V81,[2,176]),o($VT1,[2,180]),{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,26:192,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:341},o($Vj1,[2,12]),o($Vj1,[2,14]),{3:83,4:$VD,5:92,6:93,7:$VE,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:342,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74},o($Vf1,[2,26]),o($Vf1,[2,34]),o($VM1,[2,189]),{3:83,4:$VU,5:92,6:93,7:$VE,8:124,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,79:$VV,104:$Vu,129:343,130:114,131:115,132:116,133:117,134:118,135:119,136:$VW,137:$VX,140:$VY,142:$VZ,143:$V_,144:$V$,145:$V01,146:$V11,147:$V21,148:$V31,149:$V41},{3:83,4:$VU,5:92,6:93,7:$VE,8:124,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,79:$VV,104:$Vu,129:344,130:114,131:115,132:116,133:117,134:118,135:119,136:$VW,137:$VX,140:$VY,142:$VZ,143:$V_,144:$V$,145:$V01,146:$V11,147:$V21,148:$V31,149:$V41},{3:83,4:$VU,5:92,6:93,7:$VE,8:124,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,79:$VV,104:$Vu,129:345,130:114,131:115,132:116,133:117,134:118,135:119,136:$VW,137:$VX,140:$VY,142:$VZ,143:$V_,144:$V$,145:$V01,146:$V11,147:$V21,148:$V31,149:$V41},{3:83,4:$VD,5:92,6:93,7:$VE,8:346,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74},{3:83,4:$VD,5:92,6:93,7:$VE,8:348,9:[1,347],10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74},{3:83,4:$VD,5:92,6:93,7:$VE,8:350,9:[1,349],10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74},{18:[1,351]},o($VZ1,[2,168]),{9:[1,352]},o($VZ1,[2,163]),o($VZ1,[2,167]),o($V81,[2,175]),o($Vc1,[2,64]),o($VQ1,[2,20]),o($VL1,[2,200],{141:[1,353]}),o($VM1,[2,201]),o($VM1,[2,202]),{9:[1,354],25:$VO1},{3:83,4:$VU,5:92,6:93,7:$VE,8:124,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,79:$VV,104:$Vu,129:355,130:114,131:115,132:116,133:117,134:118,135:119,136:$VW,137:$VX,140:$VY,142:$VZ,143:$V_,144:$V$,145:$V01,146:$V11,147:$V21,148:$V31,149:$V41},{9:[1,356],25:$VO1},{3:83,4:$VU,5:92,6:93,7:$VE,8:124,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,79:$VV,104:$Vu,129:357,130:114,131:115,132:116,133:117,134:118,135:119,136:$VW,137:$VX,140:$VY,142:$VZ,143:$V_,144:$V$,145:$V01,146:$V11,147:$V21,148:$V31,149:$V41},{9:[1,358],25:$VO1},o($VZ1,[2,165]),o($VZ1,[2,169]),{3:83,4:$VU,5:92,6:93,7:$VE,8:124,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,79:$VV,104:$Vu,129:359,130:114,131:115,132:116,133:117,134:118,135:119,136:$VW,137:$VX,140:$VY,142:$VZ,143:$V_,144:$V$,145:$V01,146:$V11,147:$V21,148:$V31,149:$V41},{79:[1,360]},o($VM1,[2,204]),{3:83,4:$VU,5:92,6:93,7:$VE,8:124,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,79:$VV,104:$Vu,129:361,130:114,131:115,132:116,133:117,134:118,135:119,136:$VW,137:$VX,140:$VY,142:$VZ,143:$V_,144:$V$,145:$V01,146:$V11,147:$V21,148:$V31,149:$V41},o($VM1,[2,206]),{3:83,4:$VU,5:92,6:93,7:$VE,8:124,10:$VF,11:$VG,12:$VH,14:$VI,15:$VJ,16:77,22:$VK,23:$VL,24:134,26:75,27:80,28:107,29:$VM,31:$VN,32:$VO,33:$VP,34:$VQ,35:$VR,36:$VS,37:106,40:105,41:104,44:103,49:102,52:101,53:95,55:90,57:82,59:76,61:74,79:$VV,104:$Vu,129:362,130:114,131:115,132:116,133:117,134:118,135:119,136:$VW,137:$VX,140:$VY,142:$VZ,143:$V_,144:$V$,145:$V01,146:$V11,147:$V21,148:$V31,149:$V41},o($VM1,[2,199]),o($VM1,[2,203]),o($VM1,[2,205]),o($VM1,[2,207])],
defaultActions: {275:[2,158],306:[2,149]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	
	parser.yy.symbols = { types: [], enums: [] };
	parser.yy.lastSymbols = { types: [], enums: [] }; // typedefs of last parsing (gets cached)

	function getDeclarations(typeSpecifiers, declaratorList, loc){
		var r = [];
		const type = new Type(typeSpecifiers, loc); // type will be same regardless of typedef or variable declaration
		for(var declInit of declaratorList){ // handle multiple same-line declarations (int a, b = 10, c;)
			var declarator = declInit.declarator;
			var initializer = declInit.initializer;

			if(typeSpecifiers.includes("typedef")){ // specifiers include typedef
				r.push(new Typedef(type, declarator, loc));
				// get to the bottom of declarator
				var declTmp = declarator;
				while(declTmp.kind != DECLTYPE.ID && declTmp.child != null){
					declTmp = declTmp.child;
				}
				parser.yy.symbols.types.push(declTmp.identifier.name); // add typedef name to types so lexer can work with them
				//! move this to Typedef constructor
			}else{
				r.push(new Declaration(type, declarator, initializer, loc)); // basic variable declaration
			}
		}
		
		return r;
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: 
					var curr, prev;
					curr = this.input();

					while(!(curr == '/' && prev == '*') && this._input.length > 0){
						prev = curr;
						curr = this.input();
					} 
				
break;
case 1: /* skip until end of line//-comment */ 
break;
case 2: return 148; 
break;
case 3: return 136; 
break;
case 4: return 91; 
break;
case 5: return 147; 
break;
case 6: return 137; 
break;
case 7: return 144; 
break;
case 8: return 96; 
break;
case 9: return 141; 
break;
case 10: return 113; 
break;
case 11: return 95; 
break;
case 12: return 145; 
break;
case 13: return 146; 
break;
case 14: return 140; 
break;
case 15: return 93; 
break;
case 16: return 94; 
break;
case 17: return 149; 
break;
case 18: return 92; 
break;
case 19: return 97; 
break;
case 20: return 29; 
break;
case 21: return 107; 
break;
case 22: return 142; 
break;
case 23: return 89; 
break;
case 24: return 108; 
break;
case 25: return 98; 
break;
case 26: return 90; 
break;
case 27: return 99; 
break;
case 28: return 143; 
break;
case 29: return 11; 
break;
case 30: return 11; 
break;
case 31: return 11; 
break;
case 32: return 11; 
break;
case 33: return 11; 
break;
case 34: return 11; 
break;
case 35: return 10; 
break;
case 36: return 10; 
break;
case 37: return 10; 
break;
case 38: return 10; 
break;
case 39: return 10; 
break;
case 40: return 14; 
break;
case 41: 
						if(parser.yy.symbols.types.includes(yy_.yytext)){
							return 102;
						}else if(parser.yy.symbols.enums.includes(yy_.yytext)){
							return 12;
						}else{
							return 4;
						}
					
break;
case 42: return 121; 
break;
case 43: return 72; 
break;
case 44: return 71; 
break;
case 45: return 69; 
break;
case 46: return 70; 
break;
case 47: return 66; 
break;
case 48: return 67; 
break;
case 49: return 68; 
break;
case 50: return 73; 
break;
case 51: return 74; 
break;
case 52: return 75; 
break;
case 53: return 43; 
break;
case 54: return 42; 
break;
case 55: return 22; 
break;
case 56: return 23; 
break;
case 57: return 21; 
break;
case 58: return 58; 
break;
case 59: return 60; 
break;
case 60: return 47; 
break;
case 61: return 48; 
break;
case 62: return 50; 
break;
case 63: return 51; 
break;
case 64: return 79; 
break;
case 65: return 104; 
break;
case 66: return 106; 
break;
case 67: return 25; 
break;
case 68: return 63; 
break;
case 69: return 65; 
break;
case 70: return 7; 
break;
case 71: return 9; 
break;
case 72: return 17; 
break;
case 73: return 18; 
break;
case 74: return 20; 
break;
case 75: return 31; 
break;
case 76: return 36; 
break;
case 77: return 35; 
break;
case 78: return 34; 
break;
case 79: return 33; 
break;
case 80: return 32; 
break;
case 81: return 38; 
break;
case 82: return 39; 
break;
case 83: return 45; 
break;
case 84: return 46; 
break;
case 85: return 54; 
break;
case 86: return 56; 
break;
case 87: return 62; 
break;
case 88: return 152; 
break;
case 89: /* ignore whitespace */ 
break;
case 90: /* ignore bad characters */ 
break;
}
},
rules: [/^(?:\/\*)/,/^(?:\/\/[^\n]*)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:char\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:enum\b)/,/^(?:float\b)/,/^(?:for\b)/,/^(?:goto\b)/,/^(?:if\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:return\b)/,/^(?:short\b)/,/^(?:signed\b)/,/^(?:sizeof\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:typedef\b)/,/^(?:union\b)/,/^(?:unsigned\b)/,/^(?:void\b)/,/^(?:_Bool\b)/,/^(?:while\b)/,/^(?:([0-9])+(([Ee][+-]?([0-9])+))([fFlL])?)/,/^(?:([0-9])*\.([0-9])+(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:([0-9])+\.(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:((0[xX]))([a-fA-F0-9])+(([Pp][+-]?([0-9])+))([fFlL])?)/,/^(?:((0[xX]))([a-fA-F0-9])*\.([a-fA-F0-9])+(([Pp][+-]?([0-9])+))([fFlL])?)/,/^(?:((0[xX]))([a-fA-F0-9])+\.(([Pp][+-]?([0-9])+))([fFlL])?)/,/^(?:((0[bB]))[01]+)/,/^(?:((0[xX]))([a-fA-F0-9])+([uUlL]*)?)/,/^(?:([1-9])([0-9])*([uUlL]*)?)/,/^(?:0([0-7])*([uUlL]*)?)/,/^(?:([uUL])?'([^'\\\n]|((\\([\\'"?\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))))+')/,/^(?:(((u8|[uUL]))?"([^"\\\n]|((\\([\\'"?\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))))*"([\s\t\v\n\f])*)+)/,/^(?:([a-zA-Z_])(([a-zA-Z_])|([0-9]))*)/,/^(?:\.\.\.)/,/^(?:>>=)/,/^(?:<<=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:>>)/,/^(?:<<)/,/^(?:\+\+)/,/^(?:--)/,/^(?:->)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:;)/,/^(?:(\{|<%))/,/^(?:(\}|%>))/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:(\[|<:))/,/^(?:(\]|:>))/,/^(?:\.)/,/^(?:&)/,/^(?:!)/,/^(?:~)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:\^)/,/^(?:\|)/,/^(?:\?)/,/^(?:$)/,/^(?:[ \t\v\n\f])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c_parser;
exports.Parser = c_parser.Parser;
exports.parse = function () { return c_parser.parse.apply(c_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}