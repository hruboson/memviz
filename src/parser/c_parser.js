/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[1,26],$Ve=[1,27],$Vf=[1,28],$Vg=[1,31],$Vh=[1,40],$Vi=[1,41],$Vj=[1,39],$Vk=[1,32],$Vl=[1,33],$Vm=[1,34],$Vn=[1,35],$Vo=[1,36],$Vp=[1,37],$Vq=[1,12],$Vr=[1,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,114,115,120,123,124,125,126,127,128,142],$Vs=[1,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,114,115,120,123,124,125,126,127,128,142,166],$Vt=[1,51],$Vu=[1,52],$Vv=[1,50],$Vw=[1,45],$Vx=[1,4,7,10,11,12,14,15,22,23,25,27,33,34,35,36,37,38,39,82,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,114,115,120,123,124,125,126,127,128,142,150,151,154,156,157,158,159,160,161,162,163,166],$Vy=[4,7,9,17,28,35,82],$Vz=[4,7,9,17,28,35,82,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,114,115,120,123,124,125,126,127,128],$VA=[4,7,9,17,28,35,66,82,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,114,115,120,123,124,125,126,127,128],$VB=[4,25],$VC=[28,82],$VD=[2,99],$VE=[1,67],$VF=[1,66],$VG=[9,25,28,66,68,82],$VH=[1,72],$VI=[1,71],$VJ=[4,7,9,17,28],$VK=[7,9,17,25,28,66,68,82],$VL=[1,104],$VM=[1,91],$VN=[1,107],$VO=[1,108],$VP=[1,109],$VQ=[1,110],$VR=[1,111],$VS=[1,93],$VT=[1,94],$VU=[1,96],$VV=[1,98],$VW=[1,99],$VX=[1,100],$VY=[1,101],$VZ=[1,102],$V_=[1,103],$V$=[1,125],$V01=[1,128],$V11=[1,144],$V21=[1,147],$V31=[1,145],$V41=[1,146],$V51=[1,149],$V61=[1,150],$V71=[1,151],$V81=[1,152],$V91=[1,153],$Va1=[1,154],$Vb1=[1,155],$Vc1=[1,156],$Vd1=[1,157],$Ve1=[4,7,9,17,28,35,123,124,125],$Vf1=[9,18,27,28,66,82],$Vg1=[9,18,27,28,63,65,66,82],$Vh1=[1,176],$Vi1=[9,18,27,28,61,63,65,66,82],$Vj1=[1,177],$Vk1=[9,18,27,28,59,61,63,65,66,82],$Vl1=[1,178],$Vm1=[9,18,27,28,57,59,61,63,65,66,82],$Vn1=[1,179],$Vo1=[9,18,27,28,34,57,59,61,63,65,66,82],$Vp1=[1,180],$Vq1=[1,181],$Vr1=[9,18,27,28,34,53,54,57,59,61,63,65,66,82],$Vs1=[1,182],$Vt1=[1,183],$Vu1=[1,184],$Vv1=[1,185],$Vw1=[9,18,27,28,34,48,49,50,51,53,54,57,59,61,63,65,66,82],$Vx1=[1,186],$Vy1=[1,187],$Vz1=[9,18,27,28,34,45,46,48,49,50,51,53,54,57,59,61,63,65,66,82],$VA1=[1,188],$VB1=[1,189],$VC1=[9,18,27,28,34,36,37,45,46,48,49,50,51,53,54,57,59,61,63,65,66,82],$VD1=[1,190],$VE1=[1,191],$VF1=[1,192],$VG1=[9,18,27,28,34,35,36,37,41,42,45,46,48,49,50,51,53,54,57,59,61,63,65,66,82],$VH1=[9,18,27,28,34,35,36,37,41,42,45,46,48,49,50,51,53,54,57,59,61,63,65,66,68,69,70,71,72,73,74,75,76,77,78,82],$VI1=[2,35],$VJ1=[1,202],$VK1=[7,9,17,18,20,21,22,23,27,28,34,35,36,37,41,42,45,46,48,49,50,51,53,54,57,59,61,63,65,66,68,69,70,71,72,73,74,75,76,77,78,82],$VL1=[4,7,10,11,12,14,15,22,23,33,34,35,36,37,38,39],$VM1=[2,1],$VN1=[1,212],$VO1=[1,213],$VP1=[4,7,9,17,35,66,82],$VQ1=[27,99,100,101,102,103,104,105,106,107,108,111,114,115,120,123,124,125,142],$VR1=[1,221],$VS1=[27,28],$VT1=[1,233],$VU1=[1,234],$VV1=[27,28,82],$VW1=[1,4,7,10,11,12,14,15,22,23,25,27,33,34,35,36,37,38,39,82,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,114,115,120,123,124,125,126,127,128,142,150,151,154,155,156,157,158,159,160,161,162,163,166],$VX1=[4,7,10,11,12,14,15,22,23,25,27,33,34,35,36,37,38,39,82,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,114,115,120,123,124,125,126,127,128,142,150,151,154,156,157,158,159,160,161,162,163],$VY1=[4,7,10,11,12,14,15,22,23,25,27,33,34,35,36,37,38,39,82,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,114,115,120,123,124,125,126,127,128,142,150,151,154,155,156,157,158,159,160,161,162,163],$VZ1=[4,7,9,10,11,12,14,15,22,23,25,27,33,34,35,36,37,38,39,82,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,114,115,120,123,124,125,126,127,128,142,150,151,154,155,156,157,158,159,160,161,162,163],$V_1=[1,253],$V$1=[9,18,28,66,82],$V02=[9,28],$V12=[1,272],$V22=[2,181],$V32=[1,305],$V42=[1,304],$V52=[1,307],$V62=[17,20,68],$V72=[1,346],$V82=[7,9,17,28];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"primary_expression":3,"IDENTIFIER":4,"constant":5,"string":6,"(":7,"expression":8,")":9,"I_CONSTANT":10,"F_CONSTANT":11,"ENUMERATION_CONSTANT":12,"enumeration_constant":13,"STRING_LITERAL":14,"FUNC_NAME":15,"postfix_expression":16,"[":17,"]":18,"argument_expression_list":19,".":20,"PTR_OP":21,"INC_OP":22,"DEC_OP":23,"type_name":24,"{":25,"initializer_list":26,"}":27,",":28,"assignment_expression":29,"unary_expression":30,"unary_operator":31,"cast_expression":32,"SIZEOF":33,"&":34,"*":35,"+":36,"-":37,"~":38,"!":39,"multiplicative_expression":40,"/":41,"%":42,"additive_expression":43,"shift_expression":44,"LEFT_OP":45,"RIGHT_OP":46,"relational_expression":47,"<":48,">":49,"LE_OP":50,"GE_OP":51,"equality_expression":52,"EQ_OP":53,"NE_OP":54,"and_expression":55,"exclusive_or_expression":56,"^":57,"inclusive_or_expression":58,"|":59,"logical_and_expression":60,"AND_OP":61,"logical_or_expression":62,"OR_OP":63,"conditional_expression":64,"?":65,":":66,"assignment_operator":67,"=":68,"MUL_ASSIGN":69,"DIV_ASSIGN":70,"MOD_ASSIGN":71,"ADD_ASSIGN":72,"SUB_ASSIGN":73,"LEFT_ASSIGN":74,"RIGHT_ASSIGN":75,"AND_ASSIGN":76,"XOR_ASSIGN":77,"OR_ASSIGN":78,"constant_expression":79,"declaration":80,"declaration_specifiers":81,";":82,"init_declarator_list":83,"static_assert_declaration":84,"storage_class_specifier":85,"type_specifier":86,"type_qualifier":87,"function_specifier":88,"alignment_specifier":89,"init_declarator":90,"declarator":91,"initializer":92,"TYPEDEF":93,"EXTERN":94,"STATIC":95,"THREAD_LOCAL":96,"AUTO":97,"REGISTER":98,"VOID":99,"CHAR":100,"SHORT":101,"INT":102,"LONG":103,"FLOAT":104,"DOUBLE":105,"SIGNED":106,"UNSIGNED":107,"BOOL":108,"struct_or_union_specifier":109,"enum_specifier":110,"TYPEDEF_NAME":111,"struct_or_union":112,"struct_declaration_list":113,"STRUCT":114,"UNION":115,"struct_declaration":116,"specifier_qualifier_list":117,"struct_declarator_list":118,"struct_declarator":119,"ENUM":120,"enumerator_list":121,"enumerator":122,"CONST":123,"RESTRICT":124,"VOLATILE":125,"INLINE":126,"NORETURN":127,"ALIGNAS":128,"pointer":129,"direct_declarator":130,"parameter_type_list":131,"identifier_list":132,"type_qualifier_list":133,"parameter_list":134,"ELLIPSIS":135,"parameter_declaration":136,"abstract_declarator":137,"direct_abstract_declarator":138,"designation":139,"designator_list":140,"designator":141,"STATIC_ASSERT":142,"statement":143,"labeled_statement":144,"compound_statement":145,"expression_statement":146,"selection_statement":147,"iteration_statement":148,"jump_statement":149,"CASE":150,"DEFAULT":151,"block_item_list":152,"block_item":153,"IF":154,"ELSE":155,"SWITCH":156,"WHILE":157,"DO":158,"FOR":159,"GOTO":160,"CONTINUE":161,"BREAK":162,"RETURN":163,"translation_unit":164,"external_declaration":165,"EOF":166,"function_definition":167,"declaration_list":168,"$accept":0,"$end":1},
terminals_: {2:"error",4:"IDENTIFIER",7:"(",9:")",10:"I_CONSTANT",11:"F_CONSTANT",12:"ENUMERATION_CONSTANT",14:"STRING_LITERAL",15:"FUNC_NAME",17:"[",18:"]",20:".",21:"PTR_OP",22:"INC_OP",23:"DEC_OP",25:"{",27:"}",28:",",33:"SIZEOF",34:"&",35:"*",36:"+",37:"-",38:"~",39:"!",41:"/",42:"%",45:"LEFT_OP",46:"RIGHT_OP",48:"<",49:">",50:"LE_OP",51:"GE_OP",53:"EQ_OP",54:"NE_OP",57:"^",59:"|",61:"AND_OP",63:"OR_OP",65:"?",66:":",68:"=",69:"MUL_ASSIGN",70:"DIV_ASSIGN",71:"MOD_ASSIGN",72:"ADD_ASSIGN",73:"SUB_ASSIGN",74:"LEFT_ASSIGN",75:"RIGHT_ASSIGN",76:"AND_ASSIGN",77:"XOR_ASSIGN",78:"OR_ASSIGN",82:";",93:"TYPEDEF",94:"EXTERN",95:"STATIC",96:"THREAD_LOCAL",97:"AUTO",98:"REGISTER",99:"VOID",100:"CHAR",101:"SHORT",102:"INT",103:"LONG",104:"FLOAT",105:"DOUBLE",106:"SIGNED",107:"UNSIGNED",108:"BOOL",111:"TYPEDEF_NAME",114:"STRUCT",115:"UNION",120:"ENUM",123:"CONST",124:"RESTRICT",125:"VOLATILE",126:"INLINE",127:"NORETURN",128:"ALIGNAS",135:"ELLIPSIS",142:"STATIC_ASSERT",150:"CASE",151:"DEFAULT",154:"IF",155:"ELSE",156:"SWITCH",157:"WHILE",158:"DO",159:"FOR",160:"GOTO",161:"CONTINUE",162:"BREAK",163:"RETURN",166:"EOF"},
productions_: [0,[3,1],[3,1],[3,1],[3,3],[5,1],[5,1],[5,1],[13,1],[6,1],[6,1],[16,1],[16,4],[16,3],[16,4],[16,3],[16,3],[16,2],[16,2],[16,6],[16,7],[19,1],[19,3],[30,1],[30,2],[30,2],[30,2],[30,2],[30,4],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[32,1],[32,4],[40,1],[40,3],[40,3],[40,3],[43,1],[43,3],[43,3],[44,1],[44,3],[44,3],[47,1],[47,3],[47,3],[47,3],[47,3],[52,1],[52,3],[52,3],[55,1],[55,3],[56,1],[56,3],[58,1],[58,3],[60,1],[60,3],[62,1],[62,3],[64,1],[64,5],[29,1],[29,3],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[8,1],[8,3],[79,1],[80,2],[80,3],[80,1],[81,2],[81,1],[81,2],[81,1],[81,2],[81,1],[81,2],[81,1],[81,2],[81,1],[83,1],[83,3],[90,3],[90,1],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[109,4],[109,5],[109,2],[112,1],[112,1],[113,1],[113,2],[116,2],[116,3],[116,1],[117,2],[117,1],[117,2],[117,1],[118,1],[118,3],[119,2],[119,3],[119,1],[110,4],[110,5],[110,5],[110,6],[110,2],[121,1],[121,3],[122,3],[122,1],[87,1],[87,1],[87,1],[88,1],[88,1],[89,4],[89,4],[91,2],[91,1],[130,1],[130,3],[130,3],[130,4],[130,4],[130,3],[130,4],[129,3],[129,2],[129,2],[129,1],[133,1],[133,2],[131,3],[131,1],[134,1],[134,3],[136,2],[136,2],[136,1],[132,1],[132,3],[24,2],[24,1],[137,2],[137,1],[137,1],[138,3],[138,2],[138,4],[138,2],[138,3],[138,3],[138,4],[92,3],[92,4],[92,1],[26,2],[26,1],[26,4],[26,3],[139,2],[140,1],[140,2],[141,3],[141,2],[84,7],[143,1],[143,1],[143,1],[143,1],[143,1],[143,1],[144,3],[144,4],[144,3],[145,2],[145,3],[152,1],[152,2],[153,1],[153,1],[146,1],[146,2],[147,7],[147,5],[147,5],[148,5],[148,7],[148,6],[148,7],[148,6],[148,7],[149,3],[149,2],[149,2],[149,2],[149,3],[164,3],[164,2],[164,2],[164,1],[165,1],[165,1],[167,3],[168,1],[168,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 7: case 8:
 this.$ = new Identifier($$[$0], this._$); 
break;
case 2: case 3: case 11: case 23: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 37: case 41: case 44: case 47: case 52: case 55: case 57: case 59: case 61: case 63: case 65: case 67: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 82: case 116: case 117: case 122: case 123: case 155: case 170: case 182: case 214: case 216: case 238: case 239:
 this.$ = $$[$0]; 
break;
case 4: case 157: case 183: case 190: case 197: case 219:
 this.$ = $$[$0-1]; 
break;
case 5:
 this.$ = new CExpr("i_constant", $$[$0], this._$); 
break;
case 6:
 this.$ = new CExpr("f_constant", $$[$0], this._$); 
break;
case 9:
 this.$ =  new CExpr("s_literal", $$[$0], this._$); 
break;
case 10:
 this.$ = $$[$0] 
break;
case 13:
 
		this.$ = new FuncCallExpr($$[$0-2], [], this._$);
	
break;
case 14:

		this.$ = new FuncCallExpr($$[$0-3], $$[$0-1], this._$);
	
break;
case 21: case 87: case 89: case 91: case 93: case 95: case 96: case 130: case 132: case 143: case 167: case 171: case 198: case 217:
 this.$ = [$$[$0]]; 
break;
case 22: case 97: case 144: case 172:
 this.$ = [...$$[$0-2], $$[$0]]; 
break;
case 24: case 25: case 26: case 27:

		this.$ = new UExpr($$[$0], $$[$0-1], this._$);
	
break;
case 28:

		this.$ = new UExpr($$[$0-1], $$[$0-3], this._$);
	
break;
case 36:
 this.$ = new CastExpr($$[$0-2], $$[$0], this._$); 
break;
case 38: case 39: case 40: case 42: case 43: case 45: case 46: case 56: case 58: case 60: case 62: case 64:
 this.$ = new BArithExpr($$[$0-2], $$[$0-1], $$[$0], this._$); 
break;
case 48: case 49: case 50: case 51: case 53: case 54:
 this.$ = new BCompExpr($$[$0-2], $$[$0-1], $$[$0], this._$); 
break;
case 66:
 this.$ = new CondExpr($$[$0-4], $$[$0-2], $$[$0], this._$); 
break;
case 68:
 this.$ = new BAssignExpr($$[$0-2], $$[$0-1], $$[$0], this._$); 
break;
case 83:

		this.$ = [new Type($$[$0-1], this._$)];
	
break;
case 84:

		this.$ = getDeclarations($$[$0-2], $$[$0-1], this._$);
	
break;
case 86: case 88: case 90: case 92: case 94: case 129: case 131:
 this.$ = [$$[$0-1], ...$$[$0]]; 
break;
case 98: case 136:
 this.$ = { declarator: $$[$0-2], initializer: $$[$0] }; 
break;
case 99: case 137:
 this.$ = { declarator: $$[$0], initializer: null }; 
break;
case 119:
 // anonymous struct or union
		this.$ = ($$[$0-3] == "STRUCT") ? new Struct($$[$0-1], new Unnamed(this._$), this._$) : new Union($$[$0-1], new Unnamed(this._$), this._$); 
	
break;
case 120:
 // struct variable initialization and struct definition 
		this.$ = ($$[$0-4] == "STRUCT") ? new Struct($$[$0-1], new Tagname($$[$0-3], this._$), this._$) : new Union($$[$0-1], new Tagname($$[$0-3], this._$), this._$); 
	
break;
case 121:
 // struct variable declaration
		this.$ = ($$[$0-1] == "STRUCT") ? new Struct(null, new Tagname($$[$0], this._$), this._$) : new Union(null, new Tagname($$[$0], this._$), this._$); 
	
break;
case 124: case 237:
 this.$ = Array.isArray($$[$0]) ? $$[$0] : [$$[$0]]; 
break;
case 125: case 236:
 this.$ = Array.isArray($$[$0]) ? [...$$[$0-1], ...$$[$0]] : [...$$[$0-1], $$[$0]]; 
break;
case 126:
 
		this.$ = new Type($$[$0-1], this._$); 
	
break;
case 127:
 
		this.$ = [];
		for(var declInit of $$[$0-1]){
			this.$.push(new Declaration(new Type($$[$0-2], this._$), declInit.declarator, declInit.initializer, this._$));
		}
		
	
break;
case 133:

		this.$ = [$$[$0]];
	
break;
case 134:
 
		this.$ = [...$$[$0-2], $$[$0]];
	
break;
case 135:
 this.$ = { declarator: new Unnamed(this._$), initializer: $$[$0] }; 
break;
case 138:
 this.$ = new Enum(new Unnamed(this._$), $$[$0-1], this._$); 
break;
case 139:
 this.$ = new Enum(new Unnamed(this._$), $$[$0-2], this._$); 
break;
case 140:
 this.$ = new Enum($$[$0-3], $$[$0-1], this._$); 
break;
case 141:
 this.$ = new Enum($$[$0-4], $$[$0-2], this._$); 
break;
case 142:
 this.$ = new Tagname($$[$0], this._$); 
break;
case 145:
 this.$ = new Enumerator($$[$0-2], $$[$0], this._$); 
break;
case 146:
 this.$ = new Enumerator($$[$0], null, this._$); 
break;
case 154:
 this.$ = new Declarator(DECLTYPE.PTR, $$[$0], $$[$0-1], this._$); 
break;
case 156:
 this.$ = new Declarator(DECLTYPE.ID, null, new Identifier($$[$0], this._$), this._$); 
break;
case 158:
 this.$ = new Declarator(DECLTYPE.ARR, $$[$0-2], null, this._$); 
break;
case 159:
 this.$ = new Declarator(DECLTYPE.ARR, $$[$0-3], $$[$0-1], this._$); 
break;
case 160: case 162:
 this.$ = new Declarator(DECLTYPE.FNC, $$[$0-3], { parameters: $$[$0-1] }, this._$); 
break;
case 161:
 this.$ = new Declarator(DECLTYPE.FNC, $$[$0-2], { parameters: [] }, this._$); 
break;
case 163:
 this.$ = new Pointer($$[$0], $$[$0-1], this._$); 
break;
case 164:
 this.$ = new Pointer(null, $$[$0], this._$); 
break;
case 165:
 this.$ = new Pointer($$[$0], null, this._$); 
break;
case 166:
 this.$ = new Pointer(null, null, this._$); 
break;
case 168: case 199:
 this.$ = [...$$[$0-1], $$[$0]]; 
break;
case 169: case 191:
 this.$ = $$[$0-2]; 
break;
case 173: case 174:
 this.$ = new Declaration(new Type($$[$0-1], this._$), $$[$0], this._$); 
break;
case 175:
 this.$ = new Declaration(new Type($$[$0]), new Unnamed(this._$), this._$); 
break;
case 176:
 this.$ = [new Declaration(new Type(), new Declarator(DECLTYPE.ID, new Identifier($$[$0])), this._$)]; 
break;
case 177:
 this.$ = [...$$[$0-2], new Declaration(new Type(), new Declarator(DECLTYPE.ID, new Identifier($$[$0])))]; 
break;
case 180:
 this.$ = new AbstractDeclarator(DECLTYPE.PTR, $$[$0], $$[$0-1], this._$); 
break;
case 181:
 this.$ = new AbstractDeclarator(DECLTYPE.PTR, null, $$[$0], this._$); 
break;
case 184:
 this.$ = new AbstractDeclarator(DECLTYPE.ARR, null, null, this._$); 
break;
case 185:
 this.$ = new AbstractDeclarator(DECLTYPE.ARR, $$[$0-3], $$[$0-1]); 
break;
case 186:
 this.$ = new AbstractDeclarator(DECLTYPE.FNC, null, null, this._$); 
break;
case 187:
 this.$ = new AbstractDeclarator(DECLTYPE.FNC, null, $$[$0-1], this._$); 
break;
case 188:
 this.$ = new AbstractDeclarator(DECLTYPE.FNC, $$[$0-2], { parameters: [] }, this._$); 
break;
case 189:
 this.$ = new AbstractDeclarator(DECLTYPE.FNC, $$[$0-3], { parameters: $$[$0-1] }, this._$); 
break;
case 192:
 this.$ = new Initializer(INITTYPE.EXPR, $$[$0], this._$); 
break;
case 193:
 this.$ = [new Initializer(INITTYPE.NESTED, null, $$[$0], $$[$0-1], this._$)]; 
break;
case 194:
 this.$ = [new Initializer(INITTYPE.NESTED, null, $$[$0], this._$)]; 
break;
case 195:
 this.$ = [...$$[$0-3], new Initializer(INITTYPE.NESTED, null, $$[$0], $$[$0-1])]; 
break;
case 196:
 this.$ = [...$$[$0-2], new Initializer(INITTYPE.NESTED, null, $$[$0])]; 
break;
case 200:
 this.$ = new Designator($$[$0-1], this._$); 
break;
case 201:
 this.$ = new Designator(new Identifier($$[$0], this._$)); 
break;
case 212:
 this.$ = new CStmt([], this._$); 
break;
case 213:
 this.$ = new CStmt($$[$0-1], this._$); 
break;
case 215:
 this.$ = [...$$[$0-1], ...$$[$0]]; 
break;
case 218:
 this.$ = new NOP(this._$); 
break;
case 232:
 this.$ = new Return(null, this._$); 
break;
case 233:
 this.$ = new Return($$[$0-1], this._$); 
break;
case 234:
 parser.yy.lastSymbols = parser.yy.symbols; return Array.isArray($$[$0-1]) ? [...$$[$0-2], ...$$[$0-1]] : [...$$[$0-2], $$[$0-1]]; 
break;
case 235:
 parser.yy.lastSymbols = parser.yy.symbols; return Array.isArray($$[$0-1]) ? $$[$0-1] : [$$[$0-1]]; 
break;
case 240:
 this.$ = new Func($$[$0-1], $$[$0-2], $$[$0], this._$); 
break;
}
},
table: [{80:4,81:5,84:6,85:7,86:8,87:9,88:10,89:11,93:$V0,94:$V1,95:$V2,96:$V3,97:$V4,98:$V5,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,114:$Vh,115:$Vi,120:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,142:$Vq,164:1,165:2,167:3},{1:[3],80:4,81:5,84:6,85:7,86:8,87:9,88:10,89:11,93:$V0,94:$V1,95:$V2,96:$V3,97:$V4,98:$V5,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,114:$Vh,115:$Vi,120:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,142:$Vq,165:42,167:3},o($Vr,[2,237],{166:[1,43]}),o($Vs,[2,238]),o($Vs,[2,239]),{4:$Vt,7:$Vu,35:$Vv,82:$Vw,83:46,90:49,91:44,129:47,130:48},o($Vx,[2,85]),o($Vy,[2,87],{85:7,86:8,87:9,88:10,89:11,109:29,110:30,112:38,81:53,93:$V0,94:$V1,95:$V2,96:$V3,97:$V4,98:$V5,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,111:$Vg,114:$Vh,115:$Vi,120:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp}),o($Vy,[2,89],{85:7,86:8,87:9,88:10,89:11,109:29,110:30,112:38,81:54,93:$V0,94:$V1,95:$V2,96:$V3,97:$V4,98:$V5,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,111:$Vg,114:$Vh,115:$Vi,120:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp}),o($Vy,[2,91],{85:7,86:8,87:9,88:10,89:11,109:29,110:30,112:38,81:55,93:$V0,94:$V1,95:$V2,96:$V3,97:$V4,98:$V5,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,111:$Vg,114:$Vh,115:$Vi,120:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp}),o($Vy,[2,93],{85:7,86:8,87:9,88:10,89:11,109:29,110:30,112:38,81:56,93:$V0,94:$V1,95:$V2,96:$V3,97:$V4,98:$V5,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,111:$Vg,114:$Vh,115:$Vi,120:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp}),o($Vy,[2,95],{85:7,86:8,87:9,88:10,89:11,109:29,110:30,112:38,81:57,93:$V0,94:$V1,95:$V2,96:$V3,97:$V4,98:$V5,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,111:$Vg,114:$Vh,115:$Vi,120:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp}),{7:[1,58]},o($Vz,[2,100]),o($Vz,[2,101]),o($Vz,[2,102]),o($Vz,[2,103]),o($Vz,[2,104]),o($Vz,[2,105]),o($VA,[2,106]),o($VA,[2,107]),o($VA,[2,108]),o($VA,[2,109]),o($VA,[2,110]),o($VA,[2,111]),o($VA,[2,112]),o($VA,[2,113]),o($VA,[2,114]),o($VA,[2,115]),o($VA,[2,116]),o($VA,[2,117]),o($VA,[2,118]),o($VA,[2,147]),o($VA,[2,148]),o($VA,[2,149]),o($Vz,[2,150]),o($Vz,[2,151]),{7:[1,59]},{4:[1,61],25:[1,60]},{4:[1,63],25:[1,62]},o($VB,[2,122]),o($VB,[2,123]),o($Vr,[2,236],{166:[1,64]}),o($Vr,[2,235]),o($VC,$VD,{145:65,25:$VE,68:$VF}),o($Vx,[2,83]),{28:[1,69],82:[1,68]},{4:$Vt,7:$Vu,130:70},o($VG,[2,155],{7:$VH,17:$VI}),o($VC,[2,96]),o($VJ,[2,166],{133:73,129:74,87:75,35:$Vv,123:$Vk,124:$Vl,125:$Vm}),o($VK,[2,156]),{4:$Vt,7:$Vu,35:$Vv,91:76,129:47,130:48},o($Vy,[2,86]),o($Vy,[2,88]),o($Vy,[2,90]),o($Vy,[2,92]),o($Vy,[2,94]),{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:78,79:77},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,24:112,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:78,79:113,86:115,87:116,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,114:$Vh,115:$Vi,117:114,120:$Vj,123:$Vk,124:$Vl,125:$Vm},{84:120,86:115,87:116,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,113:117,114:$Vh,115:$Vi,116:118,117:119,120:$Vj,123:$Vk,124:$Vl,125:$Vm,142:$Vq},o($VA,[2,121],{25:[1,121]}),{4:$V$,13:124,121:122,122:123},o($VA,[2,142],{25:[1,126]}),o($Vr,[2,234]),o($Vs,[2,240]),{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$V01,29:129,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,92:127},{3:97,4:$V11,5:105,6:106,7:$VM,8:148,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$VE,27:[1,132],29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,80:135,81:137,82:$V21,84:6,85:7,86:8,87:9,88:10,89:11,93:$V0,94:$V1,95:$V2,96:$V3,97:$V4,98:$V5,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,114:$Vh,115:$Vi,120:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,142:$Vq,143:136,144:138,145:139,146:140,147:141,148:142,149:143,150:$V31,151:$V41,152:133,153:134,154:$V51,156:$V61,157:$V71,158:$V81,159:$V91,160:$Va1,161:$Vb1,162:$Vc1,163:$Vd1},o($Vx,[2,84]),{4:$Vt,7:$Vu,35:$Vv,90:159,91:160,129:47,130:48},o($VG,[2,154],{7:$VH,17:$VI}),{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,18:[1,161],22:$VS,23:$VT,29:162,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130},{4:[1,167],9:[1,164],81:169,85:7,86:8,87:9,88:10,89:11,93:$V0,94:$V1,95:$V2,96:$V3,97:$V4,98:$V5,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,114:$Vh,115:$Vi,120:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,131:163,132:165,134:166,136:168},o($VJ,[2,164],{129:170,87:171,35:$Vv,123:$Vk,124:$Vl,125:$Vm}),o($VJ,[2,165]),o($Ve1,[2,167]),{9:[1,172]},{28:[1,173]},o($Vf1,[2,82]),o($Vf1,[2,65],{63:[1,175],65:[1,174]}),o($Vg1,[2,63],{61:$Vh1}),o($Vi1,[2,61],{59:$Vj1}),o($Vk1,[2,59],{57:$Vl1}),o($Vm1,[2,57],{34:$Vn1}),o($Vo1,[2,55],{53:$Vp1,54:$Vq1}),o($Vr1,[2,52],{48:$Vs1,49:$Vt1,50:$Vu1,51:$Vv1}),o($Vw1,[2,47],{45:$Vx1,46:$Vy1}),o($Vz1,[2,44],{36:$VA1,37:$VB1}),o($VC1,[2,41],{35:$VD1,41:$VE1,42:$VF1}),o($VG1,[2,37]),o($VH1,$VI1),{3:97,4:$VL,5:105,6:106,7:$VM,8:194,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,24:193,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,86:115,87:116,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,114:$Vh,115:$Vi,117:114,120:$Vj,123:$Vk,124:$Vl,125:$Vm},o($VH1,[2,23],{7:[1,196],17:[1,195],20:[1,197],21:[1,198],22:[1,199],23:[1,200]}),{3:97,4:$VL,5:105,6:106,7:$VJ1,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:201,31:95,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_},{3:97,4:$VL,5:105,6:106,7:$VJ1,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:203,31:95,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:204,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_},{3:97,4:$VL,5:105,6:106,7:[1,206],10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:205,31:95,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_},o($VK1,[2,11]),o($VL1,[2,29]),o($VL1,[2,30]),o($VL1,[2,31]),o($VL1,[2,32]),o($VL1,[2,33]),o($VL1,[2,34]),o($VK1,$VM1),o($VK1,[2,2]),o($VK1,[2,3]),o($VK1,[2,5]),o($VK1,[2,6]),o($VK1,[2,7]),o($VK1,[2,9]),o($VK1,[2,10]),{9:[1,207]},{9:[1,208]},{7:$VN1,9:[2,179],17:$VO1,35:$Vv,129:210,137:209,138:211},o($VP1,[2,130],{109:29,110:30,112:38,86:115,87:116,117:214,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,111:$Vg,114:$Vh,115:$Vi,120:$Vj,123:$Vk,124:$Vl,125:$Vm}),o($VP1,[2,132],{109:29,110:30,112:38,86:115,87:116,117:215,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,111:$Vg,114:$Vh,115:$Vi,120:$Vj,123:$Vk,124:$Vl,125:$Vm}),{27:[1,216],84:120,86:115,87:116,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,114:$Vh,115:$Vi,116:217,117:119,120:$Vj,123:$Vk,124:$Vl,125:$Vm,142:$Vq},o($VQ1,[2,124]),{4:$Vt,7:$Vu,35:$Vv,66:$VR1,82:[1,218],91:222,118:219,119:220,129:47,130:48},o($VQ1,[2,128]),{84:120,86:115,87:116,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,113:223,114:$Vh,115:$Vi,116:118,117:119,120:$Vj,123:$Vk,124:$Vl,125:$Vm,142:$Vq},{27:[1,224],28:[1,225]},o($VS1,[2,143]),o($VS1,[2,146],{68:[1,226]}),o([27,28,68],[2,8]),{4:$V$,13:124,121:227,122:123},o($VC,[2,98]),{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,17:$VT1,20:$VU1,22:$VS,23:$VT,25:$V01,26:228,29:129,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,92:230,139:229,140:231,141:232},o($VV1,[2,192]),o($Vf1,[2,67]),o($VG1,$VI1,{67:235,68:[1,236],69:[1,237],70:[1,238],71:[1,239],72:[1,240],73:[1,241],74:[1,242],75:[1,243],76:[1,244],77:[1,245],78:[1,246]}),o($VW1,[2,212]),{3:97,4:$V11,5:105,6:106,7:$VM,8:148,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$VE,27:[1,247],29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,80:135,81:137,82:$V21,84:6,85:7,86:8,87:9,88:10,89:11,93:$V0,94:$V1,95:$V2,96:$V3,97:$V4,98:$V5,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,114:$Vh,115:$Vi,120:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,142:$Vq,143:136,144:138,145:139,146:140,147:141,148:142,149:143,150:$V31,151:$V41,153:248,154:$V51,156:$V61,157:$V71,158:$V81,159:$V91,160:$Va1,161:$Vb1,162:$Vc1,163:$Vd1},o($VX1,[2,214]),o($VX1,[2,216]),o($VX1,[2,217]),{4:$Vt,7:$Vu,35:$Vv,82:$Vw,83:46,90:49,91:160,129:47,130:48},o($VY1,[2,203]),o($VY1,[2,204]),o($VY1,[2,205]),o($VY1,[2,206]),o($VY1,[2,207]),o($VY1,[2,208]),o([7,17,20,21,22,23,28,34,35,36,37,41,42,45,46,48,49,50,51,53,54,57,59,61,63,65,68,69,70,71,72,73,74,75,76,77,78,82],$VM1,{66:[1,249]}),{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:78,79:250},{66:[1,251]},o($VZ1,[2,218]),{28:$V_1,82:[1,252]},{7:[1,254]},{7:[1,255]},{7:[1,256]},{3:97,4:$V11,5:105,6:106,7:$VM,8:148,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$VE,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,82:$V21,143:257,144:138,145:139,146:140,147:141,148:142,149:143,150:$V31,151:$V41,154:$V51,156:$V61,157:$V71,158:$V81,159:$V91,160:$Va1,161:$Vb1,162:$Vc1,163:$Vd1},{7:[1,258]},{4:[1,259]},{82:[1,260]},{82:[1,261]},{3:97,4:$VL,5:105,6:106,7:$VM,8:263,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,82:[1,262]},o($V$1,[2,80]),o($VC,[2,97]),o($VC,$VD,{68:$VF}),o($VK,[2,158]),{18:[1,264]},{9:[1,265]},o($VK,[2,161]),{9:[1,266],28:[1,267]},{9:[2,170],28:[1,268]},o($V02,[2,176]),o($V02,[2,171]),o($V02,[2,175],{130:48,138:211,91:269,137:270,129:271,4:$Vt,7:$V12,17:$VO1,35:$Vv}),o($VJ,[2,163]),o($Ve1,[2,168]),o($VK,[2,157]),{14:[1,273]},{3:97,4:$VL,5:105,6:106,7:$VM,8:274,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:275},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:276},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:277},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:278},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:279},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:280},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:281},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:282},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:283},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:284},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:285},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:286},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:287},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:288},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:289},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:290,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:291,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:292,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_},{9:[1,293]},{9:[1,294],28:$V_1},{3:97,4:$VL,5:105,6:106,7:$VM,8:295,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130},{3:97,4:$VL,5:105,6:106,7:$VM,9:[1,296],10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,19:297,22:$VS,23:$VT,29:298,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130},{4:[1,299]},{4:[1,300]},o($VK1,[2,17]),o($VK1,[2,18]),o($VH1,[2,24]),{3:97,4:$VL,5:105,6:106,7:$VM,8:194,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,24:301,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,86:115,87:116,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,114:$Vh,115:$Vi,117:114,120:$Vj,123:$Vk,124:$Vl,125:$Vm},o($VH1,[2,25]),o($VH1,[2,26]),o($VH1,[2,27]),{3:97,4:$VL,5:105,6:106,7:$VM,8:194,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,24:302,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,86:115,87:116,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,114:$Vh,115:$Vi,117:114,120:$Vj,123:$Vk,124:$Vl,125:$Vm},o($Vz,[2,152]),o($Vz,[2,153]),{9:[2,178]},{7:$VN1,9:$V22,17:$VO1,138:303},o($V02,[2,182],{7:$V32,17:$V42}),{7:$VN1,9:$V52,17:$VO1,35:$Vv,81:169,85:7,86:8,87:9,88:10,89:11,93:$V0,94:$V1,95:$V2,96:$V3,97:$V4,98:$V5,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,114:$Vh,115:$Vi,120:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:210,131:308,134:166,136:168,137:306,138:211},{18:[1,309]},o($VP1,[2,129]),o($VP1,[2,131]),o($VA,[2,119]),o($VQ1,[2,125]),o($VQ1,[2,126]),{28:[1,311],82:[1,310]},o($VC,[2,133]),{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:78,79:312},o($VC,[2,137],{66:[1,313]}),{27:[1,314],84:120,86:115,87:116,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,114:$Vh,115:$Vi,116:217,117:119,120:$Vj,123:$Vk,124:$Vl,125:$Vm,142:$Vq},o($VA,[2,138]),{4:$V$,13:124,27:[1,315],122:316},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:78,79:317},{27:[1,318],28:[1,319]},{27:[1,320],28:[1,321]},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$V01,29:129,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,92:322},o($VS1,[2,194]),{17:$VT1,20:$VU1,68:[1,323],141:324},o($V62,[2,198]),{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:78,79:325},{4:[1,326]},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,29:327,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130},o($VL1,[2,69]),o($VL1,[2,70]),o($VL1,[2,71]),o($VL1,[2,72]),o($VL1,[2,73]),o($VL1,[2,74]),o($VL1,[2,75]),o($VL1,[2,76]),o($VL1,[2,77]),o($VL1,[2,78]),o($VL1,[2,79]),o($VW1,[2,213]),o($VX1,[2,215]),{3:97,4:$V11,5:105,6:106,7:$VM,8:148,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$VE,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,82:$V21,143:328,144:138,145:139,146:140,147:141,148:142,149:143,150:$V31,151:$V41,154:$V51,156:$V61,157:$V71,158:$V81,159:$V91,160:$Va1,161:$Vb1,162:$Vc1,163:$Vd1},{66:[1,329]},{3:97,4:$V11,5:105,6:106,7:$VM,8:148,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$VE,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,82:$V21,143:330,144:138,145:139,146:140,147:141,148:142,149:143,150:$V31,151:$V41,154:$V51,156:$V61,157:$V71,158:$V81,159:$V91,160:$Va1,161:$Vb1,162:$Vc1,163:$Vd1},o($VZ1,[2,219]),{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,29:331,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130},{3:97,4:$VL,5:105,6:106,7:$VM,8:332,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130},{3:97,4:$VL,5:105,6:106,7:$VM,8:333,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130},{3:97,4:$VL,5:105,6:106,7:$VM,8:334,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130},{157:[1,335]},{3:97,4:$VL,5:105,6:106,7:$VM,8:148,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,80:337,81:137,82:$V21,84:6,85:7,86:8,87:9,88:10,89:11,93:$V0,94:$V1,95:$V2,96:$V3,97:$V4,98:$V5,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,114:$Vh,115:$Vi,120:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,142:$Vq,146:336},{82:[1,338]},o($VY1,[2,230]),o($VY1,[2,231]),o($VY1,[2,232]),{28:$V_1,82:[1,339]},o($VK,[2,159]),o($VK,[2,160]),o($VK,[2,162]),{4:[1,340]},{81:169,85:7,86:8,87:9,88:10,89:11,93:$V0,94:$V1,95:$V2,96:$V3,97:$V4,98:$V5,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,114:$Vh,115:$Vi,120:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,135:[1,341],136:342},o($V02,[2,173]),o($V02,[2,174]),o($V02,$V22,{130:70,138:303,4:$Vt,7:$V12,17:$VO1}),{4:$Vt,7:$V12,9:$V52,17:$VO1,35:$Vv,81:169,85:7,86:8,87:9,88:10,89:11,91:76,93:$V0,94:$V1,95:$V2,96:$V3,97:$V4,98:$V5,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,114:$Vh,115:$Vi,120:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,129:271,130:48,131:308,134:166,136:168,137:306,138:211},{9:[1,343]},{28:$V_1,66:[1,344]},o($Vg1,[2,64],{61:$Vh1}),o($Vi1,[2,62],{59:$Vj1}),o($Vk1,[2,60],{57:$Vl1}),o($Vm1,[2,58],{34:$Vn1}),o($Vo1,[2,56],{53:$Vp1,54:$Vq1}),o($Vr1,[2,53],{48:$Vs1,49:$Vt1,50:$Vu1,51:$Vv1}),o($Vr1,[2,54],{48:$Vs1,49:$Vt1,50:$Vu1,51:$Vv1}),o($Vw1,[2,48],{45:$Vx1,46:$Vy1}),o($Vw1,[2,49],{45:$Vx1,46:$Vy1}),o($Vw1,[2,50],{45:$Vx1,46:$Vy1}),o($Vw1,[2,51],{45:$Vx1,46:$Vy1}),o($Vz1,[2,45],{36:$VA1,37:$VB1}),o($Vz1,[2,46],{36:$VA1,37:$VB1}),o($VC1,[2,42],{35:$VD1,41:$VE1,42:$VF1}),o($VC1,[2,43],{35:$VD1,41:$VE1,42:$VF1}),o($VG1,[2,38]),o($VG1,[2,39]),o($VG1,[2,40]),{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$V72,30:90,31:95,32:345,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_},o($VK1,[2,4]),{18:[1,347],28:$V_1},o($VK1,[2,13]),{9:[1,348],28:[1,349]},o($V02,[2,21]),o($VK1,[2,15]),o($VK1,[2,16]),{9:[1,350]},{9:[1,351]},o($V02,[2,180],{7:$V32,17:$V42}),{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,29:352,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130},{9:[1,353],81:169,85:7,86:8,87:9,88:10,89:11,93:$V0,94:$V1,95:$V2,96:$V3,97:$V4,98:$V5,99:$V6,100:$V7,101:$V8,102:$V9,103:$Va,104:$Vb,105:$Vc,106:$Vd,107:$Ve,108:$Vf,109:29,110:30,111:$Vg,112:38,114:$Vh,115:$Vi,120:$Vj,123:$Vk,124:$Vl,125:$Vm,126:$Vn,127:$Vo,128:$Vp,131:354,134:166,136:168},{9:[1,355]},o($V82,[2,186]),{9:[1,356]},o($V82,[2,184]),o($VQ1,[2,127]),{4:$Vt,7:$Vu,35:$Vv,66:$VR1,91:222,119:357,129:47,130:48},o($VC,[2,135]),{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:78,79:358},o($VA,[2,120]),o($VA,[2,139]),o($VS1,[2,144]),o($VS1,[2,145]),o($VA,[2,140]),{4:$V$,13:124,27:[1,359],122:316},o($VV1,[2,190]),{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,17:$VT1,20:$VU1,22:$VS,23:$VT,25:$V01,27:[1,360],29:129,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,92:362,139:361,140:231,141:232},o($VS1,[2,193]),o([4,7,10,11,12,14,15,22,23,25,33,34,35,36,37,38,39],[2,197]),o($V62,[2,199]),{18:[1,363]},o($V62,[2,201]),o($Vf1,[2,68]),o($VY1,[2,209]),{3:97,4:$V11,5:105,6:106,7:$VM,8:148,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$VE,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,82:$V21,143:364,144:138,145:139,146:140,147:141,148:142,149:143,150:$V31,151:$V41,154:$V51,156:$V61,157:$V71,158:$V81,159:$V91,160:$Va1,161:$Vb1,162:$Vc1,163:$Vd1},o($VY1,[2,211]),o($V$1,[2,81]),{9:[1,365],28:$V_1},{9:[1,366],28:$V_1},{9:[1,367],28:$V_1},{7:[1,368]},{3:97,4:$VL,5:105,6:106,7:$VM,8:148,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,82:$V21,146:369},{3:97,4:$VL,5:105,6:106,7:$VM,8:148,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,82:$V21,146:370},o($VY1,[2,229]),o($VY1,[2,233]),o($V02,[2,177]),{9:[2,169]},o($V02,[2,172]),{82:[1,371]},{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,30:90,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:372},o($VH1,[2,36]),{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,17:$VT1,20:$VU1,22:$VS,23:$VT,25:$V01,26:373,29:129,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,92:230,139:229,140:231,141:232},o($VK1,[2,12]),o($VK1,[2,14]),{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,29:374,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130},{25:$V72},o($VH1,[2,28],{25:$V72}),{18:[1,375]},o($V82,[2,188]),{9:[1,376]},o($V82,[2,183]),o($V82,[2,187]),o($VC,[2,134]),o($VC,[2,136]),o($VA,[2,141]),o($VV1,[2,191]),{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$V01,29:129,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,92:377},o($VS1,[2,196]),o($V62,[2,200]),o($VY1,[2,210]),{3:97,4:$V11,5:105,6:106,7:$VM,8:148,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$VE,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,82:$V21,143:378,144:138,145:139,146:140,147:141,148:142,149:143,150:$V31,151:$V41,154:$V51,156:$V61,157:$V71,158:$V81,159:$V91,160:$Va1,161:$Vb1,162:$Vc1,163:$Vd1},{3:97,4:$V11,5:105,6:106,7:$VM,8:148,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$VE,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,82:$V21,143:379,144:138,145:139,146:140,147:141,148:142,149:143,150:$V31,151:$V41,154:$V51,156:$V61,157:$V71,158:$V81,159:$V91,160:$Va1,161:$Vb1,162:$Vc1,163:$Vd1},{3:97,4:$V11,5:105,6:106,7:$VM,8:148,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$VE,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,82:$V21,143:380,144:138,145:139,146:140,147:141,148:142,149:143,150:$V31,151:$V41,154:$V51,156:$V61,157:$V71,158:$V81,159:$V91,160:$Va1,161:$Vb1,162:$Vc1,163:$Vd1},{3:97,4:$VL,5:105,6:106,7:$VM,8:381,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130},{3:97,4:$VL,5:105,6:106,7:$VM,8:383,9:[1,382],10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130},{3:97,4:$VL,5:105,6:106,7:$VM,8:385,9:[1,384],10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130},o($Vx,[2,202]),o($Vf1,[2,66]),{27:[1,386],28:[1,387]},o($V02,[2,22]),o($V82,[2,185]),o($V82,[2,189]),o($VS1,[2,195]),o($VX1,[2,221],{155:[1,388]}),o($VY1,[2,222]),o($VY1,[2,223]),{9:[1,389],28:$V_1},{3:97,4:$V11,5:105,6:106,7:$VM,8:148,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$VE,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,82:$V21,143:390,144:138,145:139,146:140,147:141,148:142,149:143,150:$V31,151:$V41,154:$V51,156:$V61,157:$V71,158:$V81,159:$V91,160:$Va1,161:$Vb1,162:$Vc1,163:$Vd1},{9:[1,391],28:$V_1},{3:97,4:$V11,5:105,6:106,7:$VM,8:148,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$VE,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,82:$V21,143:392,144:138,145:139,146:140,147:141,148:142,149:143,150:$V31,151:$V41,154:$V51,156:$V61,157:$V71,158:$V81,159:$V91,160:$Va1,161:$Vb1,162:$Vc1,163:$Vd1},{9:[1,393],28:$V_1},o($VK1,[2,19]),{3:97,4:$VL,5:105,6:106,7:$VM,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,17:$VT1,20:$VU1,22:$VS,23:$VT,25:$V01,27:[1,394],29:129,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,92:362,139:361,140:231,141:232},{3:97,4:$V11,5:105,6:106,7:$VM,8:148,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$VE,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,82:$V21,143:395,144:138,145:139,146:140,147:141,148:142,149:143,150:$V31,151:$V41,154:$V51,156:$V61,157:$V71,158:$V81,159:$V91,160:$Va1,161:$Vb1,162:$Vc1,163:$Vd1},{82:[1,396]},o($VY1,[2,225]),{3:97,4:$V11,5:105,6:106,7:$VM,8:148,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$VE,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,82:$V21,143:397,144:138,145:139,146:140,147:141,148:142,149:143,150:$V31,151:$V41,154:$V51,156:$V61,157:$V71,158:$V81,159:$V91,160:$Va1,161:$Vb1,162:$Vc1,163:$Vd1},o($VY1,[2,227]),{3:97,4:$V11,5:105,6:106,7:$VM,8:148,10:$VN,11:$VO,12:$VP,14:$VQ,15:$VR,16:92,22:$VS,23:$VT,25:$VE,29:158,30:131,31:95,32:89,33:$VU,34:$VV,35:$VW,36:$VX,37:$VY,38:$VZ,39:$V_,40:88,43:87,44:86,47:85,52:84,55:83,56:82,58:81,60:80,62:79,64:130,82:$V21,143:398,144:138,145:139,146:140,147:141,148:142,149:143,150:$V31,151:$V41,154:$V51,156:$V61,157:$V71,158:$V81,159:$V91,160:$Va1,161:$Vb1,162:$Vc1,163:$Vd1},o($VK1,[2,20]),o($VY1,[2,220]),o($VY1,[2,224]),o($VY1,[2,226]),o($VY1,[2,228])],
defaultActions: {209:[2,178],341:[2,169]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	
	parser.yy.symbols = { types: [], enums: [] };
	parser.yy.lastSymbols = { types: [], enums: [] }; // typedefs of last parsing (gets cached)

	function getDeclarations(typeSpecifiers, declaratorList, loc){
		var r = [];
		const type = new Type(typeSpecifiers, loc); // type will be same regardless of typedef or variable declaration
		for(var declInit of declaratorList){ // handle multiple same-line declarations (int a, b = 10, c;)
			var declarator = declInit.declarator;
			var initializer = declInit.initializer;

			if(typeSpecifiers.includes("typedef")){ // specifiers include typedef
				r.push(new Typedef(type, declarator, loc));
				// get to the bottom of declarator
				var declTmp = declarator;
				while(declTmp.kind != DECLTYPE.ID && declTmp.child != null){
					declTmp = declTmp.child;
				}
				parser.yy.symbols.types.push(declTmp.identifier.name); // add typedef name to types so lexer can work with them
				//! move this to Typedef constructor
			}else{
				r.push(new Declaration(type, declarator, initializer, loc)); // basic variable declaration
			}
		}
		
		return r;
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: 
					var curr, prev;
					curr = this.input();

					while(!(curr == '/' && prev == '*') && this._input.length > 1){
						prev = curr;
						curr = this.input();
					} 
				
break;
case 1: /* skip until end of line//-comment */ 
break;
case 2: return 97; 
break;
case 3: return 162; 
break;
case 4: return 150; 
break;
case 5: return 100; 
break;
case 6: return 123; 
break;
case 7: return 161; 
break;
case 8: return 151; 
break;
case 9: return 158; 
break;
case 10: return 105; 
break;
case 11: return 155; 
break;
case 12: return 120; 
break;
case 13: return 94; 
break;
case 14: return 104; 
break;
case 15: return 159; 
break;
case 16: return 160; 
break;
case 17: return 154; 
break;
case 18: return 102; 
break;
case 19: return 103; 
break;
case 20: return 98; 
break;
case 21: return 163; 
break;
case 22: return 101; 
break;
case 23: return 106; 
break;
case 24: return 33; 
break;
case 25: return 95; 
break;
case 26: return 114; 
break;
case 27: return 156; 
break;
case 28: return 93; 
break;
case 29: return 115; 
break;
case 30: return 107; 
break;
case 31: return 99; 
break;
case 32: return 125; 
break;
case 33: return 157; 
break;
case 34: return 128; 
break;
case 35: return 'ALIGNOF'; 
break;
case 36: return 108; 
break;
case 37: return 127; 
break;
case 38: return 142; 
break;
case 39: return 96; 
break;
case 40: return 15; 
break;
case 41: return 11; 
break;
case 42: return 11; 
break;
case 43: return 11; 
break;
case 44: return 11; 
break;
case 45: return 11; 
break;
case 46: return 11; 
break;
case 47: return 10; 
break;
case 48: return 10; 
break;
case 49: return 10; 
break;
case 50: return 10; 
break;
case 51: return 10; 
break;
case 52: return 14; 
break;
case 53: 
						if(parser.yy.symbols.types.includes(yy_.yytext)){
							return 111;
						}else if(parser.yy.symbols.enums.includes(yy_.yytext)){
							return 12;
						}else{
							return 4;
						}
					
break;
case 54: return 135; 
break;
case 55: return 75; 
break;
case 56: return 74; 
break;
case 57: return 72; 
break;
case 58: return 73; 
break;
case 59: return 69; 
break;
case 60: return 70; 
break;
case 61: return 71; 
break;
case 62: return 76; 
break;
case 63: return 77; 
break;
case 64: return 78; 
break;
case 65: return 46; 
break;
case 66: return 45; 
break;
case 67: return 22; 
break;
case 68: return 23; 
break;
case 69: return 21; 
break;
case 70: return 61; 
break;
case 71: return 63; 
break;
case 72: return 50; 
break;
case 73: return 51; 
break;
case 74: return 53; 
break;
case 75: return 54; 
break;
case 76: return 82; 
break;
case 77: return 25; 
break;
case 78: return 27; 
break;
case 79: return 28; 
break;
case 80: return 66; 
break;
case 81: return 68; 
break;
case 82: return 7; 
break;
case 83: return 9; 
break;
case 84: return 17; 
break;
case 85: return 18; 
break;
case 86: return 20; 
break;
case 87: return 34; 
break;
case 88: return 39; 
break;
case 89: return 38; 
break;
case 90: return 37; 
break;
case 91: return 36; 
break;
case 92: return 35; 
break;
case 93: return 41; 
break;
case 94: return 42; 
break;
case 95: return 48; 
break;
case 96: return 49; 
break;
case 97: return 57; 
break;
case 98: return 59; 
break;
case 99: return 65; 
break;
case 100: return 166; 
break;
case 101: /* ignore whitespace */ 
break;
case 102: /* ignore bad characters */ 
break;
}
},
rules: [/^(?:\/\*)/,/^(?:\/\/[^\n]*)/,/^(?:auto\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:char\b)/,/^(?:const\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:enum\b)/,/^(?:extern\b)/,/^(?:float\b)/,/^(?:for\b)/,/^(?:goto\b)/,/^(?:if\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:register\b)/,/^(?:return\b)/,/^(?:short\b)/,/^(?:signed\b)/,/^(?:sizeof\b)/,/^(?:static\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:typedef\b)/,/^(?:union\b)/,/^(?:unsigned\b)/,/^(?:void\b)/,/^(?:volatile\b)/,/^(?:while\b)/,/^(?:_Alignas\b)/,/^(?:_Alignof\b)/,/^(?:_Bool\b)/,/^(?:_Noreturn\b)/,/^(?:_Static_assert\b)/,/^(?:_Thread_local\b)/,/^(?:__func__\b)/,/^(?:([0-9])+(([Ee][+-]?([0-9])+))([fFlL])?)/,/^(?:([0-9])*\.([0-9])+(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:([0-9])+\.(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:((0[xX]))([a-fA-F0-9])+(([Pp][+-]?([0-9])+))([fFlL])?)/,/^(?:((0[xX]))([a-fA-F0-9])*\.([a-fA-F0-9])+(([Pp][+-]?([0-9])+))([fFlL])?)/,/^(?:((0[xX]))([a-fA-F0-9])+\.(([Pp][+-]?([0-9])+))([fFlL])?)/,/^(?:((0[bB]))[01]+)/,/^(?:((0[xX]))([a-fA-F0-9])+([uUlL]*)?)/,/^(?:([1-9])([0-9])*([uUlL]*)?)/,/^(?:0([0-7])*([uUlL]*)?)/,/^(?:([uUL])?'([^'\\\n]|((\\(['"?\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))))+')/,/^(?:(((u8|[uUL]))?"([^"\\\n]|((\\(['"?\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))))*"([\s\t\v\n\f])*)+)/,/^(?:([a-zA-Z_])(([a-zA-Z_])|([0-9]))*)/,/^(?:\.\.\.)/,/^(?:>>=)/,/^(?:<<=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:>>)/,/^(?:<<)/,/^(?:\+\+)/,/^(?:--)/,/^(?:->)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:;)/,/^(?:(\{|<%))/,/^(?:(\}|%>))/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:(\[|<:))/,/^(?:(\]|:>))/,/^(?:\.)/,/^(?:&)/,/^(?:!)/,/^(?:~)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:\^)/,/^(?:\|)/,/^(?:\?)/,/^(?:$)/,/^(?:[ \t\v\n\f])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c_parser;
exports.Parser = c_parser.Parser;
exports.parse = function () { return c_parser.parse.apply(c_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}